# models/client.py
"""–ú–æ–¥–µ–ª—å –∫–ª—ñ—î–Ω—Ç–∞"""
from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field
from sqlmodel import Field as SQLField, SQLModel
import uuid


class ClientBase(SQLModel):
    """–ë–∞–∑–æ–≤–∞ –º–æ–¥–µ–ª—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è SQLModel"""
    # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ
    first_name: str = SQLField(max_length=100)
    last_name: str = SQLField(max_length=100)
    middle_name: Optional[str] = SQLField(default=None, max_length=100)
    phone: str = SQLField(max_length=20, unique=True)
    email: Optional[str] = SQLField(default=None, max_length=100)
    birth_date: Optional[datetime] = None
    
    # –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
    notes: Optional[str] = None
    is_active: bool = SQLField(default=True)
    
    # –î–∞—Ç–∏
    created_at: datetime = SQLField(default_factory=datetime.now)
    updated_at: datetime = SQLField(default_factory=datetime.now)
    last_visit: Optional[datetime] = None


class Client(ClientBase, table=True):
    """–ú–æ–¥–µ–ª—å –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    __tablename__ = "clients"
    
    id: str = SQLField(default_factory=lambda: str(uuid.uuid4()), primary_key=True)
    
    @property
    def full_name(self) -> str:
        """–ü–æ–≤–Ω–µ —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞"""
        parts = [self.last_name, self.first_name]
        if self.middle_name:
            parts.append(self.middle_name)
        return " ".join(parts)
    
    @property
    def folder_name(self) -> str:
        """–ù–∞–∑–≤–∞ –ø–∞–ø–∫–∏ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –∫–ª—ñ—î–Ω—Ç–∞"""
        return f"{self.last_name}_{self.first_name}_{self.id}"
    
    def get_age(self) -> Optional[int]:
        """–†–æ–∑—Ä–∞—Ö–æ–≤—É—î –≤—ñ–∫ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not self.birth_date:
            return None
        today = datetime.now().date()
        birth = self.birth_date.date() if isinstance(self.birth_date, datetime) else self.birth_date
        age = today.year - birth.year
        if today.month < birth.month or (today.month == birth.month and today.day < birth.day):
            age -= 1
        return age
    
    def get_client_directory(self):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –∫–ª—ñ—î–Ω—Ç–∞"""
        from pathlib import Path
        
        # –ü—Ä–æ—Å—Ç–∏–π —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞
        base_dir = Path(__file__).parent.parent
        clients_dir = base_dir / "data" / "clients"
        clients_dir.mkdir(parents=True, exist_ok=True)
        
        client_dir = clients_dir / f"client_{self.id}"
        client_dir.mkdir(parents=True, exist_ok=True)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—ñ–¥–ø–∞–ø–∫–∏
        subdirs = ["photos", "documents", "testing", "reports", "other"]
        for subdir in subdirs:
            (client_dir / subdir).mkdir(exist_ok=True)
            
        return client_dir
    
    def create_client_structure(self):
        """–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            client_dir = self.get_client_directory()
            print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {self.full_name}")
            return client_dir
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ {self.id}: {e}")
            raise
    
    def log_activity(self, activity: str):
        """–õ–æ–≥—É–≤–∞—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∫–ª—ñ—î–Ω—Ç–∞"""
        print(f"üë§ –ö–ª—ñ—î–Ω—Ç {self.full_name} ({self.id}): {activity}")
    
    def update_last_visit(self):
        """–û–Ω–æ–≤–∏—Ç–∏ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–∑–∏—Ç—É"""
        self.last_visit = datetime.now()
        self.updated_at = datetime.now()
        self.log_activity("–û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞—Ç—É –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤—ñ–∑–∏—Ç—É")


class ClientCreate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
    first_name: str = Field(min_length=1, max_length=100)
    last_name: str = Field(min_length=1, max_length=100)
    middle_name: Optional[str] = Field(default=None, max_length=100)
    phone: str = Field(min_length=10, max_length=20)
    email: Optional[str] = Field(default=None, max_length=100)
    birth_date: Optional[datetime] = None
    notes: Optional[str] = None


class ClientUpdate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
    first_name: Optional[str] = Field(default=None, max_length=100)
    last_name: Optional[str] = Field(default=None, max_length=100)
    middle_name: Optional[str] = Field(default=None, max_length=100)
    phone: Optional[str] = Field(default=None, max_length=20)
    email: Optional[str] = Field(default=None, max_length=100)
    birth_date: Optional[datetime] = None
    notes: Optional[str] = None
    is_active: Optional[bool] = None