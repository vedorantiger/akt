# config/logger.py
"""–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è Fitness CRM"""

import os
import sys
from datetime import datetime
from pathlib import Path
from loguru import logger
from rich.console import Console
from rich.logging import RichHandler
from typing import Optional

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ Rich Console
rich_console = Console()


class FitnessLogger:
    """–ö–∞—Å—Ç–æ–º–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è Fitness CRM"""
    
    def __init__(self):
        self.logs_dir = Path("logs")
        self.logs_dir.mkdir(exist_ok=True)
        self._setup_logger()
    
    def _setup_logger(self):
        """–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥–≥–µ—Ä–∞"""
        # –í–∏–¥–∞–ª—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫
        logger.remove()
        
        # –ö–æ–Ω—Å–æ–ª—å–Ω–∏–π –≤–∏–≤—ñ–¥ –∑ –∫–æ–ª—å–æ—Ä–∞–º–∏
        logger.add(
            sys.stdout,
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
                   "<level>{level: <8}</level> | "
                   "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> | "
                   "<level>{message}</level>",
            level="INFO",
            colorize=True
        )
        
        # –û—Å–Ω–æ–≤–Ω–∏–π –ª–æ–≥ —Ñ–∞–π–ª
        current_month = datetime.now().strftime("%Y_%m")
        logger.add(
            self.logs_dir / f"app_{current_month}.log",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}",
            level="DEBUG",
            rotation="1 month",
            retention="6 months",
            compression="zip",
            encoding="utf-8"
        )
        
        # –õ–æ–≥ –ø–æ–º–∏–ª–æ–∫
        logger.add(
            self.logs_dir / f"errors_{current_month}.log",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}",
            level="ERROR",
            rotation="1 month", 
            retention="12 months",
            compression="zip",
            encoding="utf-8"
        )
        
        # –õ–æ–≥ UI –ø–æ–¥—ñ–π
        logger.add(
            self.logs_dir / f"ui_{current_month}.log",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}",
            level="INFO",
            rotation="1 month",
            retention="3 months",
            compression="zip",
            encoding="utf-8",
            filter=lambda record: "UI" in record["extra"].get("category", "")
        )
        
        # –õ–æ–≥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
        logger.add(
            self.logs_dir / f"database_{current_month}.log",
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} | {message}",
            level="DEBUG",
            rotation="1 month",
            retention="6 months", 
            compression="zip",
            encoding="utf-8",
            filter=lambda record: "DB" in record["extra"].get("category", "")
        )

    def get_logger(self, name: str, category: Optional[str] = None):
        """–û—Ç—Ä–∏–º–∞—Ç–∏ –ª–æ–≥–≥–µ—Ä –∑ –≤–∫–∞–∑–∞–Ω–∏–º —ñ–º'—è–º —Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—î—é"""
        bound_logger = logger.bind(category=category or "APP")
        return bound_logger
    
    def log_startup(self):
        """–õ–æ–≥ –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏"""
        logger.info("üöÄ Fitness CRM –∑–∞–ø—É—â–µ–Ω–æ")
        logger.info(f"üìÅ –†–æ–±–æ—á–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—è: {os.getcwd()}")
        logger.info(f"üêç Python –≤–µ—Ä—Å—ñ—è: {sys.version}")
    
    def log_shutdown(self):
        """–õ–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏"""
        logger.info("üõë Fitness CRM –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –ª–æ–≥–≥–µ—Ä–∞
fitness_logger = FitnessLogger()

# –ó—Ä—É—á–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π
def get_app_logger():
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏"""
    return fitness_logger.get_logger("APP", "APP")

def get_ui_logger():
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è UI –ø–æ–¥—ñ–π"""
    return fitness_logger.get_logger("UI", "UI")

def get_db_logger():
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    return fitness_logger.get_logger("DB", "DB")

def get_api_logger():
    """–õ–æ–≥–≥–µ—Ä –¥–ª—è API –∑–∞–ø–∏—Ç—ñ–≤"""
    return fitness_logger.get_logger("API", "API")


# Rich utilities –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–∏–≤–æ–¥—É
def print_success(message: str):
    """–ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è"""
    rich_console.print(f"[bold green]‚úÖ {message}[/bold green]")

def print_error(message: str):
    """–ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ –ø–æ–º–∏–ª–∫–∏"""
    rich_console.print(f"[bold red]‚ùå {message}[/bold red]")

def print_warning(message: str):
    """–ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è"""
    rich_console.print(f"[bold yellow]‚ö†Ô∏è {message}[/bold yellow]")

def print_info(message: str):
    """–ö—Ä–∞—Å–∏–≤–∏–π –≤–∏–≤—ñ–¥ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
    rich_console.print(f"[bold blue]‚ÑπÔ∏è {message}[/bold blue]")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ
if __name__ != "__main__":
    fitness_logger.log_startup()
