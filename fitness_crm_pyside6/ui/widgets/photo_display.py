# ui/widgets/photo_display.py
"""–í—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—ó —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π"""
import os
from PIL import Image, ImageEnhance
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                               QSlider, QPushButton, QFrame)
from PySide6.QtCore import Qt, Signal, QTimer, QPointF
from PySide6.QtGui import QPixmap, QWheelEvent, QMouseEvent, QPainter, QTransform


# –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å –¥–ª—è —Å–ª–∞–π–¥–µ—Ä—ñ–≤
MINI_SLIDER_STYLE = """
QSlider::groove:horizontal {
    border: 1px solid #CCCCCC;
    height: 6px;
    background: #F0F0F0;
    border-radius: 3px;
}
QSlider::handle:horizontal {
    background: #4A90E2;
    border: 1px solid #357ABD;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    margin: -4px 0;
}
QSlider::handle:horizontal:hover {
    background: #357ABD;
}
QSlider::sub-page:horizontal {
    background: #4A90E2;
    border-radius: 3px;
}
"""


class PhotoDisplayWidget(QLabel):
    """–í—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑ –∑—É–º–æ–º, –ø–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è–º —Ç–∞ –∫–æ—Ä–µ–∫—Ü—ñ—î—é"""
    
    # –°–∏–≥–Ω–∞–ª–∏
    drag_started = Signal(int)  # —ñ–Ω–¥–µ–∫—Å —Ñ–æ—Ç–æ
    drop_accepted = Signal(int, int)  # –∑_—ñ–Ω–¥–µ–∫—Å—É, –≤_—ñ–Ω–¥–µ–∫—Å
    
    def __init__(self, photo_path, index=0, parent=None):
        super().__init__(parent)
        self.photo_path = photo_path
        self.index = index
        self.parent_widget = parent
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self._scale = 1.0
        self._offset = QPointF(0, 0)
        self._brightness = 0  # -100 –¥–æ 100
        self._contrast = 100  # 0 –¥–æ 200
        self._saturation = 100  # 0 –¥–æ 200
        self._sharpness = 100  # 0 –¥–æ 400
        
        # –û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self._original_image = None
        self._current_pixmap = None
        
        # –ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
        self._dragging = False
        self._drag_start_pos = QPointF()
        self._is_drag_drop_mode = False
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∫–æ—Ä–µ–∫—Ü—ñ—ó
        self._adjustment_timer = QTimer()
        self._adjustment_timer.setSingleShot(True)
        self._adjustment_timer.timeout.connect(self._apply_adjustments)
        
        self._init_ui()
        self._load_image()
    
    def _init_ui(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –≤—ñ–¥–∂–µ—Ç"""
        self.setMinimumSize(300, 300)
        self.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.setStyleSheet("""
            QLabel {
                border: 2px solid #E5E7EB;
                border-radius: 8px;
                background: #F9FAFB;
            }
        """)
        
        # –í–∫–ª—é—á–∞—î–º–æ –æ–±—Ä–æ–±–∫—É –ø–æ–¥—ñ–π –º–∏—à—ñ
        self.setMouseTracking(True)
        self.setAcceptDrops(True)
    
    def _load_image(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not os.path.exists(self.photo_path):
            self.setText("üì∑\n–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
        
        try:
            self._original_image = Image.open(self.photo_path).convert('RGB')
            self._auto_fit_photo()
        except Exception as e:
            self.setText(f"üì∑\n–ü–æ–º–∏–ª–∫–∞: {str(e)}")
    
    def _auto_fit_photo(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–ø–∏—Å—É—î —Ñ–æ—Ç–æ –≤ –≤—ñ–¥–∂–µ—Ç"""
        if not self._original_image:
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–∏–π –º–∞—Å—à—Ç–∞–±
        widget_size = self.size()
        img_size = self._original_image.size
        
        scale_x = (widget_size.width() - 20) / img_size[0]
        scale_y = (widget_size.height() - 20) / img_size[1]
        self._scale = min(scale_x, scale_y, 1.0)  # –ù–µ –∑–±—ñ–ª—å—à—É—î–º–æ –±—ñ–ª—å—à–µ –æ—Ä–∏–≥—ñ–Ω–∞–ª—É
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self._offset = QPointF(0, 0)
        
        self._apply_adjustments()
    
    def _apply_adjustments(self):
        """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î –≤—Å—ñ –∫–æ—Ä–µ–∫—Ü—ñ—ó –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
        if not self._original_image:
            return
        
        # –ö–æ–ø—ñ—é—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        img = self._original_image.copy()
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –∫–æ—Ä–µ–∫—Ü—ñ—ó
        if self._brightness != 0:
            brightness_factor = 1.0 + (self._brightness / 100.0)
            img = ImageEnhance.Brightness(img).enhance(brightness_factor)
        
        if self._contrast != 100:
            contrast_factor = self._contrast / 100.0
            img = ImageEnhance.Contrast(img).enhance(contrast_factor)
        
        if self._saturation != 100:
            saturation_factor = self._saturation / 100.0
            img = ImageEnhance.Color(img).enhance(saturation_factor)
        
        if self._sharpness != 100:
            sharpness_factor = self._sharpness / 100.0
            img = ImageEnhance.Sharpness(img).enhance(sharpness_factor)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ QPixmap
        img_qt = img.convert('RGB')
        width, height = img_qt.size
        img_data = img_qt.tobytes('raw', 'RGB')
        
        from PySide6.QtGui import QImage
        qimg = QImage(img_data, width, height, QImage.Format.Format_RGB888)
        pixmap = QPixmap.fromImage(qimg)
        
        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –º–∞—Å—à—Ç–∞–± —Ç–∞ –∑–º—ñ—â–µ–Ω–Ω—è
        if self._scale != 1.0 or self._offset != QPointF(0, 0):
            scaled_pixmap = pixmap.scaled(
                int(pixmap.width() * self._scale),
                int(pixmap.height() * self._scale),
                Qt.AspectRatioMode.KeepAspectRatio,
                Qt.TransformationMode.SmoothTransformation
            )
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π pixmap –∑ –≤—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –∑–º—ñ—â–µ–Ω–Ω—è
            final_pixmap = QPixmap(self.size())
            final_pixmap.fill(Qt.GlobalColor.transparent)
            
            painter = QPainter(final_pixmap)
            painter.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform)
            
            # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–∑–∏—Ü—ñ—é –¥–ª—è —Ü–µ–Ω—Ç—Ä—É–≤–∞–Ω–Ω—è + –∑–º—ñ—â–µ–Ω–Ω—è
            x = (self.width() - scaled_pixmap.width()) // 2 + int(self._offset.x())
            y = (self.height() - scaled_pixmap.height()) // 2 + int(self._offset.y())
            
            painter.drawPixmap(x, y, scaled_pixmap)
            painter.end()
            
            self._current_pixmap = final_pixmap
        else:
            self._current_pixmap = pixmap
        
        self.setPixmap(self._current_pixmap)
    
    def wheelEvent(self, event: QWheelEvent):
        """–û–±—Ä–æ–±–ª—è—î –ø—Ä–æ–∫—Ä—É—Ç–∫—É –º–∏—à—ñ –¥–ª—è –∑—É–º—É"""
        if not self._original_image:
            return
        
        # –ó—É–º
        delta = event.angleDelta().y()
        zoom_factor = 1.1 if delta > 0 else 0.9
        
        old_scale = self._scale
        self._scale *= zoom_factor
        self._scale = max(0.1, min(5.0, self._scale))  # –û–±–º–µ–∂—É—î–º–æ –º–∞—Å—à—Ç–∞–±
        
        # –ö–æ—Ä–µ–∫—Ü—ñ—è –∑–º—ñ—â–µ–Ω–Ω—è –¥–ª—è –∑—É–º—É –≤—ñ–¥–Ω–æ—Å–Ω–æ –ø–æ–∑–∏—Ü—ñ—ó –º–∏—à—ñ
        if old_scale != self._scale:
            mouse_pos = event.position()
            widget_center = QPointF(self.width() / 2, self.height() / 2)
            
            # –í—ñ–¥–Ω–æ—Å–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è –º–∏—à—ñ –≤—ñ–¥ —Ü–µ–Ω—Ç—Ä—É
            relative_pos = mouse_pos - widget_center
            
            # –ö–æ—Ä–µ–∫—Ü—ñ—è –∑–º—ñ—â–µ–Ω–Ω—è
            scale_ratio = self._scale / old_scale
            self._offset = (self._offset - relative_pos) * scale_ratio + relative_pos
        
        self._apply_adjustments()
    
    def mousePressEvent(self, event: QMouseEvent):
        """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –º–∏—à—ñ"""
        if event.button() == Qt.MouseButton.LeftButton:
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∑–∞—Ç–∏—Å–Ω—É—Ç–æ Ctrl –¥–ª—è drag-and-drop
            if event.modifiers() & Qt.KeyboardModifier.ControlModifier:
                self._is_drag_drop_mode = True
                self.drag_started.emit(self.index)
                self.setStyleSheet("""
                    QLabel {
                        border: 3px dashed #0EA5E9;
                        border-radius: 8px;
                        background: rgba(14, 165, 233, 0.1);
                        opacity: 0.7;
                    }
                """)
            else:
                # –ó–≤–∏—á–∞–π–Ω–µ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è
                self._dragging = True
                self._drag_start_pos = event.position()
    
    def mouseMoveEvent(self, event: QMouseEvent):
        """–û–±—Ä–æ–±–ª—è—î —Ä—É—Ö –º–∏—à—ñ"""
        if self._dragging and not self._is_drag_drop_mode:
            # –ü–∞–Ω–æ—Ä–∞–º—É–≤–∞–Ω–Ω—è
            delta = event.position() - self._drag_start_pos
            self._offset += delta
            self._drag_start_pos = event.position()
            self._apply_adjustments()
    
    def mouseReleaseEvent(self, event: QMouseEvent):
        """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø—É—Å–∫–∞–Ω–Ω—è –º–∏—à—ñ"""
        if event.button() == Qt.MouseButton.LeftButton:
            self._dragging = False
            
            if self._is_drag_drop_mode:
                self._is_drag_drop_mode = False
                # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å
                self.setStyleSheet("""
                    QLabel {
                        border: 2px solid #E5E7EB;
                        border-radius: 8px;
                        background: #F9FAFB;
                    }
                """)
    
    def dragEnterEvent(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤—Ö—ñ–¥ –≤ –∑–æ–Ω—É drag-and-drop"""
        if hasattr(self.parent_widget, '_current_drag_index'):
            if self.parent_widget._current_drag_index != self.index:
                self.setStyleSheet("""
                    QLabel {
                        border: 3px dashed #10B981;
                        border-radius: 8px;
                        background: rgba(16, 185, 129, 0.1);
                    }
                """)
                event.accept()
    
    def dragLeaveEvent(self, event):
        """–û–±—Ä–æ–±–ª—è—î –≤–∏—Ö—ñ–¥ –∑ –∑–æ–Ω–∏ drag-and-drop"""
        if not self._is_drag_drop_mode:
            self.setStyleSheet("""
                QLabel {
                    border: 2px solid #E5E7EB;
                    border-radius: 8px;
                    background: #F9FAFB;
                }
            """)
    
    def dropEvent(self, event):
        """–û–±—Ä–æ–±–ª—è—î drop"""
        if hasattr(self.parent_widget, '_current_drag_index'):
            from_index = self.parent_widget._current_drag_index
            to_index = self.index
            if from_index != to_index:
                self.drop_accepted.emit(from_index, to_index)
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ—Ä–º–∞–ª—å–Ω–∏–π —Å—Ç–∏–ª—å
        self.setStyleSheet("""
            QLabel {
                border: 2px solid #E5E7EB;
                border-radius: 8px;
                background: #F9FAFB;
            }
        """)
    
    def get_current_transform_params(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
        return {
            'photo_scale': self._scale,
            'photo_offset_x': self._offset.x(),
            'photo_offset_y': self._offset.y(),
            'brightness': self._brightness,
            'contrast': self._contrast,
            'saturation': self._saturation,
            'sharpness': self._sharpness
        }
    
    def set_photo_params(self, params):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ–æ—Ç–æ"""
        self._scale = params.get('photo_scale', 1.0)
        self._offset = QPointF(
            params.get('photo_offset_x', 0),
            params.get('photo_offset_y', 0)
        )
        self._brightness = params.get('brightness', 0)
        self._contrast = params.get('contrast', 100)
        self._saturation = params.get('saturation', 100)
        self._sharpness = params.get('sharpness', 100)
        self._apply_adjustments()
    
    def set_brightness(self, value):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —è—Å–∫—Ä–∞–≤—ñ—Å—Ç—å"""
        self._brightness = value
        self._adjustment_timer.start(50)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç—ñ
    
    def set_contrast(self, value):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–æ–Ω—Ç—Ä–∞—Å—Ç"""
        self._contrast = value
        self._adjustment_timer.start(50)
    
    def set_saturation(self, value):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –Ω–∞—Å–∏—á–µ–Ω—ñ—Å—Ç—å"""
        self._saturation = value
        self._adjustment_timer.start(50)
    
    def set_sharpness(self, value):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —Ä—ñ–∑–∫—ñ—Å—Ç—å"""
        self._sharpness = value
        self._adjustment_timer.start(50)
    
    def reset_adjustments(self):
        """–°–∫–∏–¥–∞—î –≤—Å—ñ –∫–æ—Ä–µ–∫—Ü—ñ—ó"""
        self._brightness = 0
        self._contrast = 100
        self._saturation = 100
        self._sharpness = 100
        self._auto_fit_photo()
    
    def center_photo(self):
        """–¶–µ–Ω—Ç—Ä—É—î —Ñ–æ—Ç–æ"""
        self._auto_fit_photo()


class PhotoControlPanel(QWidget):
    """–ü–∞–Ω–µ–ª—å –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∑ —Å–ª–∞–π–¥–µ—Ä–∞–º–∏ –∫–æ—Ä–µ–∫—Ü—ñ—ó"""
    
    def __init__(self, photo_display_widget, parent=None):
        super().__init__(parent)
        self.photo_widget = photo_display_widget
        self._init_ui()
        self._connect_signals()
    
    def _init_ui(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–∞–Ω–µ–ª—ñ"""
        main_layout = QVBoxLayout(self)
        main_layout.setContentsMargins(8, 8, 8, 8)
        main_layout.setSpacing(6)
        
        # –ü–∞–Ω–µ–ª—å –∑ —Ç–µ–º–Ω–∏–º —Ñ–æ–Ω–æ–º
        panel_frame = QFrame()
        panel_frame.setStyleSheet("""
            QFrame {
                background: #374151;
                border-radius: 6px;
                padding: 8px;
            }
        """)
        main_layout.addWidget(panel_frame)
        
        panel_layout = QVBoxLayout(panel_frame)
        panel_layout.setContentsMargins(8, 8, 8, 8)
        panel_layout.setSpacing(8)
        
        # –°–ª–∞–π–¥–µ—Ä–∏ –∫–æ—Ä–µ–∫—Ü—ñ—ó
        sliders_layout = QVBoxLayout()
        sliders_layout.setSpacing(4)
        
        # –Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å
        self.brightness_slider = self._create_slider("‚òÄÔ∏è –Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å", -100, 100, 0)
        sliders_layout.addLayout(self.brightness_slider)
        
        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç
        self.contrast_slider = self._create_slider("‚óê –ö–æ–Ω—Ç—Ä–∞—Å—Ç", 0, 200, 100)
        sliders_layout.addLayout(self.contrast_slider)
        
        # –ù–∞—Å–∏—á–µ–Ω—ñ—Å—Ç—å
        self.saturation_slider = self._create_slider("üé® –ù–∞—Å–∏—á–µ–Ω—ñ—Å—Ç—å", 0, 200, 100)
        sliders_layout.addLayout(self.saturation_slider)
        
        # –†—ñ–∑–∫—ñ—Å—Ç—å
        self.sharpness_slider = self._create_slider("üî™ –†—ñ–∑–∫—ñ—Å—Ç—å", 0, 400, 100)
        sliders_layout.addLayout(self.sharpness_slider)
        
        panel_layout.addLayout(sliders_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥—ñ–π
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(6)
        
        reset_btn = QPushButton("üîÑ")
        reset_btn.setFixedSize(30, 24)
        reset_btn.setToolTip("–°–∫–∏–Ω—É—Ç–∏ –∫–æ—Ä–µ–∫—Ü—ñ—ó")
        reset_btn.setStyleSheet("""
            QPushButton {
                background: #6B7280;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #9CA3AF;
            }
        """)
        reset_btn.clicked.connect(self._reset_adjustments)
        
        center_btn = QPushButton("üéØ")
        center_btn.setFixedSize(30, 24)
        center_btn.setToolTip("–¶–µ–Ω—Ç—Ä—É–≤–∞—Ç–∏")
        center_btn.setStyleSheet("""
            QPushButton {
                background: #3B82F6;
                color: white;
                border: none;
                border-radius: 4px;
                font-size: 12px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #2563EB;
            }
        """)
        center_btn.clicked.connect(self.photo_widget.center_photo)
        
        buttons_layout.addWidget(reset_btn)
        buttons_layout.addWidget(center_btn)
        buttons_layout.addStretch()
        
        panel_layout.addLayout(buttons_layout)
    
    def _create_slider(self, label_text, min_val, max_val, default_val):
        """–°—Ç–≤–æ—Ä—é—î —Å–ª–∞–π–¥–µ—Ä –∑ –ø—ñ–¥–ø–∏—Å–æ–º"""
        layout = QHBoxLayout()
        layout.setSpacing(6)
        
        # –ü—ñ–¥–ø–∏—Å
        label = QLabel(label_text)
        label.setFixedWidth(90)
        label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 11px;
                font-weight: 500;
            }
        """)
        layout.addWidget(label)
        
        # –°–ª–∞–π–¥–µ—Ä
        slider = QSlider(Qt.Orientation.Horizontal)
        slider.setRange(min_val, max_val)
        slider.setValue(default_val)
        slider.setStyleSheet(MINI_SLIDER_STYLE)
        layout.addWidget(slider)
        
        # –ó–Ω–∞—á–µ–Ω–Ω—è
        value_label = QLabel(str(default_val))
        value_label.setFixedWidth(35)
        value_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        value_label.setStyleSheet("""
            QLabel {
                color: white;
                font-size: 10px;
                background: #4B5563;
                border-radius: 3px;
                padding: 2px;
            }
        """)
        layout.addWidget(value_label)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ value_label –≤ —Å–ª–∞–π–¥–µ—Ä—ñ
        slider.value_label = value_label
        
        return layout
    
    def _connect_signals(self):
        """–ü—ñ–¥–∫–ª—é—á–∞—î —Å–∏–≥–Ω–∞–ª–∏ —Å–ª–∞–π–¥–µ—Ä—ñ–≤"""
        # –Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å
        brightness_slider = self.brightness_slider.itemAt(1).widget()
        brightness_slider.valueChanged.connect(self.photo_widget.set_brightness)
        brightness_slider.valueChanged.connect(lambda v: brightness_slider.value_label.setText(str(v)))
        
        # –ö–æ–Ω—Ç—Ä–∞—Å—Ç
        contrast_slider = self.contrast_slider.itemAt(1).widget()
        contrast_slider.valueChanged.connect(self.photo_widget.set_contrast)
        contrast_slider.valueChanged.connect(lambda v: contrast_slider.value_label.setText(str(v)))
        
        # –ù–∞—Å–∏—á–µ–Ω—ñ—Å—Ç—å
        saturation_slider = self.saturation_slider.itemAt(1).widget()
        saturation_slider.valueChanged.connect(self.photo_widget.set_saturation)
        saturation_slider.valueChanged.connect(lambda v: saturation_slider.value_label.setText(str(v)))
        
        # –†—ñ–∑–∫—ñ—Å—Ç—å
        sharpness_slider = self.sharpness_slider.itemAt(1).widget()
        sharpness_slider.valueChanged.connect(self.photo_widget.set_sharpness)
        sharpness_slider.valueChanged.connect(lambda v: sharpness_slider.value_label.setText(str(v)))
    
    def _reset_adjustments(self):
        """–°–∫–∏–¥–∞—î –≤—Å—ñ –∫–æ—Ä–µ–∫—Ü—ñ—ó"""
        # –°–∫–∏–¥–∞—î–º–æ —Å–ª–∞–π–¥–µ—Ä–∏
        self.brightness_slider.itemAt(1).widget().setValue(0)
        self.contrast_slider.itemAt(1).widget().setValue(100)
        self.saturation_slider.itemAt(1).widget().setValue(100)
        self.sharpness_slider.itemAt(1).widget().setValue(100)
        
        # –°–∫–∏–¥–∞—î–º–æ –≤ photo widget
        self.photo_widget.reset_adjustments()
