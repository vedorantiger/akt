# ui/main_window.py
from PySide6.QtCore import Qt, QTimer
from PySide6.QtWidgets import QApplication, QHBoxLayout, QVBoxLayout, QWidget, QDialog, QGridLayout
from PySide6.QtGui import QResizeEvent
from qfluentwidgets import (
    FluentWindow, NavigationItemPosition, setTheme, Theme, 
    SearchLineEdit, PrimaryPushButton, SegmentedWidget,
    StrongBodyLabel, InfoBar, InfoBarPosition,
    SingleDirectionScrollArea
)
from qfluentwidgets import FluentIcon as FIF
from ui.widgets.photo_card import PhotoCard
from ui.dialogs.edit_client.main_dialog import EditClientDialog
import sys


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ –¥–ª—è UI –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
UI_SETTINGS = {
    'card_width': 320,      # –®–∏—Ä–∏–Ω–∞ –∫–∞—Ä—Ç–∫–∏
    'card_spacing': 25,     # –í—ñ–¥—Å—Ç–∞–Ω—å –º—ñ–∂ –∫–∞—Ä—Ç–∫–∞–º–∏
    'min_margin': 40,       # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ –≤—ñ–¥—Å—Ç—É–ø–∏
    'max_columns': 5        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
}


class ClientsPage(QWidget):
    """–°—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setObjectName("clientsPage")
        self.client_cards = []  # –°–ø–∏—Å–æ–∫ –≤—Å—ñ—Ö –∫–∞—Ä—Ç–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        self._active_widgets = []  # –ê–∫—Ç–∏–≤–Ω—ñ –≤—ñ–¥–∂–µ—Ç–∏
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó resize
        self.resize_timer = QTimer(self)
        self.resize_timer.setInterval(100)  # –ó–∞—Ç—Ä–∏–º–∫–∞ 100 –º—Å
        self.resize_timer.setSingleShot(True)
        self.resize_timer.timeout.connect(self._update_display)
        
        self._init_ui()
        self.add_test_clients()
        
    def _init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        # –û—Å–Ω–æ–≤–Ω–∏–π layout
        layout = QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
        control_panel = QWidget()
        control_panel.setFixedHeight(60)
        control_panel.setStyleSheet("""
            QWidget {
                background-color: white;
                border-bottom: 1px solid #E5E7EB;
            }
        """)
        control_layout = QHBoxLayout(control_panel)
        control_layout.setContentsMargins(20, 10, 20, 10)
        control_layout.setSpacing(15)
        
        # –ü–æ—à—É–∫
        self.search_input = SearchLineEdit()
        self.search_input.setPlaceholderText("üîç –ü–æ—à—É–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤...")
        self.search_input.setFixedWidth(400)
        self.search_input.setFixedHeight(40)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        self.add_btn = PrimaryPushButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
        self.add_btn.setFixedHeight(40)
        self.add_btn.clicked.connect(self.add_client)
        
        # –ü–µ—Ä–µ–º–∏–∫–∞—á –≤–∏–¥—É
        self.view_toggle = SegmentedWidget()
        self.view_toggle.addItem("grid", "üî≥", lambda: self._switch_to_grid_view())
        self.view_toggle.addItem("list", "üìÑ", lambda: self._switch_to_list_view())
        self.view_toggle.setCurrentItem("grid")
        self.view_toggle.setFixedHeight(40)
        
        control_layout.addWidget(self.search_input)
        control_layout.addStretch()
        control_layout.addWidget(self.view_toggle)
        control_layout.addWidget(self.add_btn)
        
        layout.addWidget(control_panel)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é
        self.scroll_area = SingleDirectionScrollArea(Qt.Orientation.Vertical)
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
        """)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–∞—Ä—Ç–æ–∫
        self.cards_container = QWidget()
        self.cards_container.setObjectName("cardsContainer")
        
        # –ì—Ä—ñ–¥ –ª–µ–π–∞—É—Ç –¥–ª—è –∫–∞—Ä—Ç–æ–∫
        self.cards_grid_layout = QGridLayout(self.cards_container)
        self.cards_grid_layout.setSpacing(UI_SETTINGS['card_spacing'])
        self.cards_grid_layout.setContentsMargins(
            UI_SETTINGS['min_margin'], 
            UI_SETTINGS['min_margin'],
            UI_SETTINGS['min_margin'], 
            UI_SETTINGS['min_margin']
        )
        
        self.scroll_area.setWidget(self.cards_container)
        layout.addWidget(self.scroll_area)
    
    def add_test_clients(self):
        """–î–æ–¥–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤"""
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ —Ñ–∞–π–ª—ñ–≤
        self._load_clients_from_files()
        self._update_display()
    
    def _load_clients_from_files(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑ JSON —Ñ–∞–π–ª—ñ–≤"""
        import os
        import json
        
        clients_dir = "data/clients"
        if not os.path.exists(clients_dir):
            return
        
        self.client_cards = []
        
        for filename in os.listdir(clients_dir):
            if filename.endswith('.json'):
                filepath = os.path.join(clients_dir, filename)
                try:
                    with open(filepath, 'r', encoding='utf-8') as f:
                        client_data = json.load(f)
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞
                    card = PhotoCard(client_data, self)
                    card.clicked.connect(lambda cid=client_data.get('id'): self.open_client(cid))
                    card.edit_requested.connect(lambda cid=client_data.get('id'): self.edit_client(cid))
                    card.delete_requested.connect(lambda cid=client_data.get('id'): self.delete_client(cid))
                    card.swap_requested.connect(self._handle_card_swap)
                    
                    self.client_cards.append(card)
                    
                except Exception as e:
                    print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ —Ñ–∞–π–ª—É {filename}: {e}")
    
    def _update_display(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–∞—Ä—Ç–æ–∫"""
        # –û—á–∏—â–∞—î–º–æ –ª–µ–π–∞—É—Ç
        self._clear_layout()
        
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_width = self.cards_container.width()
        if container_width <= 100:  # –ó–∞—Ö–∏—Å—Ç –≤—ñ–¥ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤
            return
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
        total_spacing = UI_SETTINGS['min_margin'] * 2
        available_width = container_width - total_spacing
        card_with_spacing = UI_SETTINGS['card_width'] + UI_SETTINGS['card_spacing']
        columns = max(1, min(available_width // card_with_spacing, UI_SETTINGS['max_columns']))
        
        # –†–æ–∑—Å—Ç–∞–≤–ª—è—î–º–æ –∫–∞—Ä—Ç–∫–∏
        for i, card in enumerate(self.client_cards):
            row = i // columns
            col = i % columns
            self.cards_grid_layout.addWidget(card, row, col)
            self._active_widgets.append(card)
        
        # –î–æ–¥–∞—î–º–æ stretch –¥–ª—è –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è
        self.cards_grid_layout.setColumnStretch(columns, 1)
    
    def _clear_layout(self):
        """–û—á–∏—â–µ–Ω–Ω—è –ª–µ–π–∞—É—Ç—É"""
        for widget in self._active_widgets:
            self.cards_grid_layout.removeWidget(widget)
        self._active_widgets.clear()
    
    def resizeEvent(self, event: QResizeEvent):
        """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ —Ä–æ–∑–º—ñ—Ä—É –≤—ñ–∫–Ω–∞"""
        super().resizeEvent(event)
        self.resize_timer.start()  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—î–º–æ —Ç–∞–π–º–µ—Ä
    
    def _switch_to_grid_view(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∏–¥ —Å—ñ—Ç–∫–∏"""
        InfoBar.success(
            title='–£—Å–ø—ñ—Ö',
            content="–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∏–¥ —Å—ñ—Ç–∫–∏",
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=1000,
            parent=self
        )
    
    def _switch_to_list_view(self):
        """–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∏–¥ —Å–ø–∏—Å–∫—É"""
        InfoBar.info(
            title='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è',
            content="–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –Ω–∞ –≤–∏–¥ —Å–ø–∏—Å–∫—É",
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=1000,
            parent=self
        )
        # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –≤–∏–¥ —Å–ø–∏—Å–∫—É
    
    def _add_client_card(self, client_data):
        """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤—É –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞"""
        card = PhotoCard(client_data, self)
        card.clicked.connect(lambda: self.open_client(client_data.get('id')))
        card.edit_requested.connect(lambda: self.edit_client(client_data.get('id')))
        card.delete_requested.connect(lambda: self.delete_client(client_data.get('id')))
        card.swap_requested.connect(self._handle_card_swap)
        
        self.client_cards.append(card)
        self._update_display()
    
    def add_client(self):
        """–î–æ–¥–∞—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        dialog = EditClientDialog(parent=self)
        dialog.client_saved.connect(self._on_client_saved)
        
        if dialog.exec() == QDialog.Accepted:
            pass
    
    def _on_client_saved(self, client_data):
        """–û–±—Ä–æ–±–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        first_name = client_data.get('first_name', '')
        surname = client_data.get('surname', '')
        full_name = f"{first_name} {surname}".strip() or '–ù–µ–≤—ñ–¥–æ–º–∏–π'
        
        InfoBar.success(
            title='–£—Å–ø—ñ—Ö',
            content=f"–ö–ª—ñ—î–Ω—Ç–∞ '{full_name}' —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=3000,
            parent=self
        )
        
        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—É –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞ –¥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        self._add_client_card(client_data)
    
    def open_client(self, client_id: str):
        """–í—ñ–¥–∫—Ä–∏—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–ª—ñ—î–Ω—Ç–∞"""
        InfoBar.info(
            title='–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è',
            content=f"–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª—ñ—î–Ω—Ç–∞ ID: {client_id}",
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=2000,
            parent=self
        )
    
    def edit_client(self, client_id: str):
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—É—î–º–æ –¥–æ MainWindow"""
        if self.parent():
            self.parent().edit_client(client_id)
    
    def delete_client(self, client_id: str):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—É—î–º–æ –¥–æ MainWindow"""
        if self.parent():
            self.parent().delete_client(client_id)
    
    def _handle_card_swap(self, source_id: str, target_id: str):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –ø–æ—Ä—è–¥–∫—É –∫–∞—Ä—Ç–æ–∫ - –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤—É—î–º–æ –¥–æ MainWindow"""
        if self.parent():
            self.parent()._handle_card_swap(source_id, target_id)


class MainWindow(FluentWindow):
    """–ì–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –ø—Ä–æ–≥—Ä–∞–º–∏"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Fitness CRM - –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞–º–∏")
        self.resize(1200, 800)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å–≤—ñ—Ç–ª—É —Ç–µ–º—É
        setTheme(Theme.LIGHT)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
        self.clients_page = ClientsPage(self)
        
        # –î–æ–¥–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –¥–æ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
        self.addSubInterface(
            self.clients_page, 
            FIF.PEOPLE, 
            "–ö–ª—ñ—î–Ω—Ç–∏"
        )
        self.addSubInterface(
            self._create_placeholder_page("–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"), 
            FIF.BASKETBALL, 
            "–¢—Ä–µ–Ω—É–≤–∞–Ω–Ω—è"
        )
        self.addSubInterface(
            self._create_placeholder_page("–•–∞—Ä—á—É–≤–∞–Ω–Ω—è"), 
            FIF.CALORIES, 
            "–•–∞—Ä—á—É–≤–∞–Ω–Ω—è"
        )
        self.addSubInterface(
            self._create_placeholder_page("–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"), 
            FIF.CHART, 
            "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞"
        )
        self.addSubInterface(
            self._create_placeholder_page("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è"), 
            FIF.SETTING, 
            "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", 
            position=NavigationItemPosition.BOTTOM
        )
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∑–∏–Ω—É
        self.trash_page = self._create_trash_page()
        self.addSubInterface(
            self.trash_page,
            FIF.DELETE,
            "–ö–æ—Ä–∑–∏–Ω–∞", 
            position=NavigationItemPosition.BOTTOM
        )
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ä—Ç–æ–≤—É —Å—Ç–æ—Ä—ñ–Ω–∫—É
        self.navigationInterface.setCurrentItem("–ö–ª—ñ—î–Ω—Ç–∏")
    
    def _create_placeholder_page(self, title):
        """–°—Ç–≤–æ—Ä—é—î –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏"""
        page = QWidget()
        page.setObjectName(f"{title.lower().replace(' ', '_')}_page")
        layout = QVBoxLayout(page)
        layout.setAlignment(Qt.AlignCenter)
        
        label = StrongBodyLabel(f"{title} - –≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ")
        label.setAlignment(Qt.AlignCenter)
        layout.addWidget(label)
        
        return page
    
    def _create_trash_page(self):
        """–°—Ç–≤–æ—Ä—é—î —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–æ—Ä–∑–∏–Ω–∏"""
        page = QWidget()
        page.setObjectName("trash_page")
        layout = QVBoxLayout(page)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = StrongBodyLabel("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞")
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –ø–æ–≤–Ω–æ–≥–æ –¥—ñ–∞–ª–æ–≥—É –∫–æ—Ä–∑–∏–Ω–∏
        open_trash_btn = PrimaryPushButton("üìÇ –í—ñ–¥–∫—Ä–∏—Ç–∏ –∫–æ—Ä–∑–∏–Ω—É")
        open_trash_btn.setFixedSize(200, 40)
        open_trash_btn.clicked.connect(self._open_trash_dialog)
        
        btn_layout = QHBoxLayout()
        btn_layout.addStretch()
        btn_layout.addWidget(open_trash_btn)
        btn_layout.addStretch()
        
        layout.addLayout(btn_layout)
        layout.addStretch()
        
        return page
    
    def _open_trash_dialog(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –∫–æ—Ä–∑–∏–Ω–∏"""
        from ui.dialogs.trash_dialog import TrashDialog
        dialog = TrashDialog(self)
        dialog.client_restored.connect(self._on_client_restored)
        dialog.exec()
    
    def _on_client_restored(self):
        """–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞ –∑ –∫–æ—Ä–∑–∏–Ω–∏"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
        clients_page = self.stackedWidget.widget(0)  # –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        
        if hasattr(clients_page, 'client_cards'):
            # –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ—Ö –∫–ª—ñ—î–Ω—Ç—ñ–≤
            clients_page.client_cards.clear()
            clients_page._load_clients_from_files()
            clients_page._update_display()
        
        InfoBar.success(
            title='–û–Ω–æ–≤–ª–µ–Ω–æ',
            content="–°–ø–∏—Å–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è",
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=2000,
            parent=self
        )

    def edit_client(self, client_id: str):
        """–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            import os
            import json
            
            # –ó–Ω–∞–π–¥–µ–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ ID
            client_data = None
            clients_dir = "data/clients"
            
            if os.path.exists(clients_dir):
                for filename in os.listdir(clients_dir):
                    if filename.endswith('.json'):
                        filepath = os.path.join(clients_dir, filename)
                        try:
                            with open(filepath, 'r', encoding='utf-8') as f:
                                data = json.load(f)
                            if data.get('id') == client_id:
                                client_data = data
                                break
                        except Exception:
                            continue
            
            if not client_data:
                InfoBar.error(
                    title='–ü–æ–º–∏–ª–∫–∞',
                    content=f"–ö–ª—ñ—î–Ω—Ç–∞ –∑ ID {client_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    orient=Qt.Horizontal,
                    isClosable=True,
                    position=InfoBarPosition.TOP,
                    duration=3000,
                    parent=self
                )
                return
            
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
            dialog = EditClientDialog(client_data=client_data, parent=self)
            dialog.client_saved.connect(self._on_client_updated)
            
            if dialog.exec() == QDialog.Accepted:
                # –î—ñ–∞–ª–æ–≥ –∑–∞–∫—Ä–∏—Ç–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º "–ü—Ä–∏–π–Ω—è—Ç–æ"
                pass
                
        except Exception as e:
            InfoBar.error(
                title='–ü–æ–º–∏–ª–∫–∞',
                content=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞: {str(e)}",
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP,
                duration=3000,
                parent=self
            )
    
    def _on_client_updated(self, client_data):
        """–û–±—Ä–æ–±–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É –∫–ª—ñ—î–Ω—Ç—ñ–≤
        clients_page = self.stackedWidget.widget(0)  # –ü–µ—Ä—à–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ - —Ü–µ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ –∫–ª—ñ—î–Ω—Ç—ñ–≤
        
        if hasattr(clients_page, 'client_cards'):
            # –ó–Ω–∞–π–¥–µ–º–æ –∫–∞—Ä—Ç–∫—É –∫–ª—ñ—î–Ω—Ç–∞ —ñ –æ–Ω–æ–≤–∏–º–æ —ó—ó
            client_id = client_data.get('id')
            for card in clients_page.client_cards:
                if hasattr(card, 'client_data') and card.client_data.get('id') == client_id:
                    # –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∫–∞—Ä—Ç–∫–∏
                    card.client_data = client_data
                    # –ü–æ–≤–Ω—ñ—Å—Ç—é –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∫–∞—Ä—Ç–∫—É –∑ –Ω–æ–≤–∏–º–∏ –¥–∞–Ω–∏–º–∏
                    if hasattr(card, 'updateCardData'):
                        card.updateCardData(client_data)
                    break
        
        InfoBar.success(
            title='–ó–±–µ—Ä–µ–∂–µ–Ω–æ',
            content=f"–ö–ª—ñ—î–Ω—Ç–∞ '{client_data.get('full_name', '–ù–µ–≤—ñ–¥–æ–º–∏–π')}' —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ",
            orient=Qt.Horizontal,
            isClosable=True,
            position=InfoBarPosition.TOP,
            duration=2000,
            parent=self
        )

    def delete_client(self, client_id: str):
        """–í–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            import os
            import json
            import shutil
            from datetime import datetime
            from qfluentwidgets import MessageBox
            
            # –ó–Ω–∞–π–¥–µ–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞
            client_data = None
            clients_dir = "data/clients"
            filepath = None
            
            if os.path.exists(clients_dir):
                for filename in os.listdir(clients_dir):
                    if filename.endswith('.json'):
                        temp_filepath = os.path.join(clients_dir, filename)
                        try:
                            with open(temp_filepath, 'r', encoding='utf-8') as f:
                                data = json.load(f)
                            if data.get('id') == client_id:
                                client_data = data
                                filepath = temp_filepath
                                break
                        except Exception:
                            continue
            
            if not client_data:
                InfoBar.error(
                    title='–ü–æ–º–∏–ª–∫–∞',
                    content=f"–ö–ª—ñ—î–Ω—Ç–∞ –∑ ID {client_id} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
                    orient=Qt.Horizontal,
                    isClosable=True,
                    position=InfoBarPosition.TOP,
                    duration=3000,
                    parent=self
                )
                return
            
            # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
            first_name = client_data.get('first_name', '')
            surname = client_data.get('surname', '')
            display_name = f"{first_name} {surname}".strip() or '–ù–µ–≤—ñ–¥–æ–º–∏–π'
            
            result = MessageBox(
                title="üóëÔ∏è –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                content=f"–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞ '{display_name}'?\n\n–¶—è –¥—ñ—è –Ω–µ–∑–≤–æ—Ä–æ—Ç–Ω—è!",
                parent=self
            ).exec()
            
            if result == 1:  # 1 –æ–∑–Ω–∞—á–∞—î "–¢–∞–∫" –≤ QFluentWidgets
                # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
                if filepath and os.path.exists(filepath):
                    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –∫–æ—Ä–∑–∏–Ω–∏
                    trash_dir = "data/trash"
                    os.makedirs(trash_dir, exist_ok=True)
                    
                    # –°—Ç–≤–æ—Ä—é—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—É –ø–∞–ø–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—ñ
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    safe_name = "".join(c for c in display_name if c.isalnum() or c in ' -_').strip().replace(' ', '_')[:20]
                    client_trash_dir = os.path.join(trash_dir, f"{safe_name}_{timestamp}")
                    os.makedirs(client_trash_dir, exist_ok=True)
                    
                    # –ü–µ—Ä–µ–º—ñ—â—É—î–º–æ JSON —Ñ–∞–π–ª
                    filename = os.path.basename(filepath)
                    trash_filepath = os.path.join(client_trash_dir, filename)
                    shutil.move(filepath, trash_filepath)
                
                # –í–∏–¥–∞–ª—è—î–º–æ –∫–∞—Ä—Ç–∫—É –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
                clients_page = self.stackedWidget.widget(0)
                if hasattr(clients_page, 'client_cards'):
                    for i, card in enumerate(clients_page.client_cards):
                        if card.client_data.get('id') == client_id:
                            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –ª–µ–π–∞—É—Ç—É
                            clients_page.cards_grid_layout.removeWidget(card)
                            card.setParent(None)
                            # –í–∏–¥–∞–ª—è—î–º–æ –∑—ñ —Å–ø–∏—Å–∫—É
                            clients_page.client_cards.pop(i)
                            break
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥–∫—É
                    clients_page._update_display()
                
                InfoBar.success(
                    title='–£—Å–ø—ñ—Ö',
                    content=f"–ö–ª—ñ—î–Ω—Ç–∞ '{display_name}' –ø–µ—Ä–µ–º—ñ—â–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É",
                    orient=Qt.Horizontal,
                    isClosable=True,
                    position=InfoBarPosition.TOP,
                    duration=3000,
                    parent=self
                )
                
        except Exception as e:
            InfoBar.error(
                title='–ü–æ–º–∏–ª–∫–∞',
                content=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞: {str(e)}",
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP,
                duration=3000,
                parent=self
            )

    def _handle_card_swap(self, source_id: str, target_id: str):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –ø–æ—Ä—è–¥–∫—É –∫–∞—Ä—Ç–æ–∫"""
        try:
            clients_page = self.stackedWidget.widget(0)
            if hasattr(clients_page, 'client_cards'):
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —ñ–Ω–¥–µ–∫—Å–∏ –∫–∞—Ä—Ç–æ–∫
                source_index = -1
                target_index = -1
                
                for i, card in enumerate(clients_page.client_cards):
                    if card.client_data.get('id') == source_id:
                        source_index = i
                    elif card.client_data.get('id') == target_id:
                        target_index = i
                
                if source_index != -1 and target_index != -1:
                    # –ú—ñ–Ω—è—î–º–æ –º—ñ—Å—Ü—è–º–∏ –∫–∞—Ä—Ç–∫–∏ –≤ —Å–ø–∏—Å–∫—É
                    clients_page.client_cards[source_index], clients_page.client_cards[target_index] = \
                        clients_page.client_cards[target_index], clients_page.client_cards[source_index]
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ —Ä–æ–∑–∫–ª–∞–¥–∫—É
                    clients_page._update_display()
                    
                    InfoBar.success(
                        title='–£—Å–ø—ñ—Ö',
                        content="–ü–æ—Ä—è–¥–æ–∫ –∫–ª—ñ—î–Ω—Ç—ñ–≤ –∑–º—ñ–Ω–µ–Ω–æ",
                        orient=Qt.Horizontal,
                        isClosable=True,
                        position=InfoBarPosition.TOP,
                        duration=2000,
                        parent=self
                    )
                    
        except Exception as e:
            InfoBar.error(
                title='–ü–æ–º–∏–ª–∫–∞',
                content=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–æ—Ä—è–¥–∫—É: {str(e)}",
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP,
                duration=3000,
                parent=self
            )


if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())
