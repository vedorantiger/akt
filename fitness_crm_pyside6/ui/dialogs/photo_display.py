# ui/dialogs/photo_display.py
"""–í—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞"""
from PySide6.QtCore import Signal, QRect, Qt
from PySide6.QtWidgets import QWidget
from PySide6.QtGui import QPixmap, QPainter, QColor, QFont, QPen


class PhotoDisplayWidget(QWidget):
    """–í—ñ–¥–∂–µ—Ç –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞"""
    
    photo_changed = Signal(str)  # –°–∏–≥–Ω–∞–ª –∑–º—ñ–Ω–∏ —Ñ–æ—Ç–æ
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        # –î–∞–Ω—ñ —Ñ–æ—Ç–æ
        self.photo_path = None
        self.pixmap = None
        self._scale = 1.0  # –ü–æ—Ç–æ—á–Ω–∏–π –º–∞—Å—à—Ç–∞–±
        self._offset = None  # –ó–º—ñ—â–µ–Ω–Ω—è —è–∫ QPointF
        
        # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è
        self.photo_scale = 1.0
        self.photo_offset_x = 0
        self.photo_offset_y = 0
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        self.brightness = 0
        self.contrast = 0
        self.saturation = 0
        self.sharpness = 0
        
        # –ü—Ä–∞–ø–æ—Ä—Ü—ñ –¥–ª—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è
        self.dragging = False
        self.last_pan_point = None
        
        # –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –º–∞—Å—à—Ç–∞–±
        self.min_scale = 0.1
        self.max_scale = 5.0
        
        self._init_ui()
        
    def _init_ui(self):
        """–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É"""
        self.setMinimumSize(280, 350)
        self.setStyleSheet("""
            PhotoDisplayWidget {
                background-color: #FAFAFA;
                border: 2px solid #E5E7EB;
                border-radius: 8px;
            }
        """)
        
        # –ü–æ–∫–∞–∑—É—î–º–æ –∑–∞–≥–ª—É—à–∫—É —Å–ø–æ—á–∞—Ç–∫—É
        self._show_placeholder()
    
    def _show_placeholder(self):
        """–ü–æ–∫–∞–∑—É—î –∑–∞–≥–ª—É—à–∫—É –∫–æ–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î"""
        self.photo_path = None
        self.pixmap = None
        self.update()
    
    def load_photo(self, photo_path):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ñ–æ—Ç–æ –∑–∞ —à–ª—è—Ö–æ–º"""
        try:
            self.photo_path = photo_path
            self.pixmap = QPixmap(photo_path)
            
            if self.pixmap.isNull():
                self._show_placeholder()
                return False
            
            # –°–∫–∏–¥–∞—î–º–æ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            if self._scale == 1.0 and (not self._offset or (self._offset.x() == 0 and self._offset.y() == 0)):
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–≥–∞–Ω—è—î–º–æ —Ñ–æ—Ç–æ
                self._auto_fit_photo()
            else:
                # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
                self._scale = self.photo_scale
                from PySide6.QtCore import QPointF
                if not self._offset:
                    self._offset = QPointF(self.photo_offset_x, self.photo_offset_y)
                else:
                    self._offset.setX(self.photo_offset_x)
                    self._offset.setY(self.photo_offset_y)
            
            self.update()
            self.photo_changed.emit(photo_path)
            return True
            
        except (OSError, IOError) as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: {e}")
            self._show_placeholder()
            return False
    
    def _fit_to_widget(self):
        """–ü—ñ–¥–≥–∞–Ω—è—î —Ñ–æ—Ç–æ –ø—ñ–¥ —Ä–æ–∑–º—ñ—Ä –≤—ñ–¥–∂–µ—Ç–∞"""
        if not self.pixmap:
            return
        
        widget_rect = self.rect()
        pixmap_rect = self.pixmap.rect()
        
        # –û–±—á–∏—Å–ª—é—î–º–æ –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–º—ñ—â–µ–Ω–Ω—è
        scale_x = widget_rect.width() / pixmap_rect.width()
        scale_y = widget_rect.height() / pixmap_rect.height()
        
        self.photo_scale = min(scale_x, scale_y) * 0.9  # –¢—Ä–æ—Ö–∏ –∑–º–µ–Ω—à—É—î–º–æ –¥–ª—è –≤—ñ–¥—Å—Ç—É–ø—ñ–≤
        
        # –¶–µ–Ω—Ç—Ä—É—î–º–æ
        scaled_width = pixmap_rect.width() * self.photo_scale
        scaled_height = pixmap_rect.height() * self.photo_scale
        
        self.photo_offset_x = (widget_rect.width() - scaled_width) / 2
        self.photo_offset_y = (widget_rect.height() - scaled_height) / 2
    
    def paintEvent(self, event):
        """–ú–∞–ª—é—î –≤—ñ–¥–∂–µ—Ç"""
        painter = QPainter(self)
        painter.setRenderHint(QPainter.RenderHint.SmoothPixmapTransform)
        
        if self.pixmap and not self.pixmap.isNull():
            self._draw_photo(painter)
        else:
            self._draw_placeholder(painter)
    
    def _draw_photo(self, painter):
        """–ú–∞–ª—é—î —Ñ–æ—Ç–æ –∑ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—è–º–∏"""
        if not self.pixmap or not self._offset:
            return
        
        # –û–±—á–∏—Å–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä–∏ —Ç–∞ –ø–æ–∑–∏—Ü—ñ—é
        scaled_width = int(self.pixmap.width() * self._scale)
        scaled_height = int(self.pixmap.height() * self._scale)
        
        x = int(self._offset.x())
        y = int(self._offset.y())
        
        # –ú–∞–ª—é—î–º–æ —Ñ–æ—Ç–æ
        target_rect = QRect(x, y, scaled_width, scaled_height)
        painter.drawPixmap(target_rect, self.pixmap)
    
    def _draw_placeholder(self, painter):
        """–ú–∞–ª—é—î –∑–∞–≥–ª—É—à–∫—É –∫–æ–ª–∏ —Ñ–æ—Ç–æ –Ω–µ–º–∞—î"""
        rect = self.rect()
        
        # –§–æ–Ω
        painter.fillRect(rect, QColor("#FAFAFA"))
        
        # –Ü–∫–æ–Ω–∫–∞ –∫–∞–º–µ—Ä–∏
        painter.setPen(QPen(QColor("#6B7280"), 2))
        font = QFont()
        font.setPointSize(48)
        painter.setFont(font)
        
        camera_text = "üì∑"
        camera_rect = painter.fontMetrics().boundingRect(camera_text)
        camera_x = (rect.width() - camera_rect.width()) // 2
        camera_y = (rect.height() // 2) - 20
        
        painter.drawText(camera_x, camera_y, camera_text)
        
        # –¢–µ–∫—Å—Ç
        font.setPointSize(14)
        font.setBold(True)
        painter.setFont(font)
        painter.setPen(QColor("#4B5563"))
        
        text = "–§–û–¢–û"
        text_rect = painter.fontMetrics().boundingRect(text)
        text_x = (rect.width() - text_rect.width()) // 2
        text_y = camera_y + 60
        
        painter.drawText(text_x, text_y, text)
    
    def wheelEvent(self, event):
        """–û–±—Ä–æ–±–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –º–∏—à—ñ –¥–ª—è –∑—É–º—É"""
        if not self.pixmap or not self._offset:
            return
        
        # –ó—É–º
        zoom_factor = 1.1 if event.angleDelta().y() > 0 else 1.0 / 1.1
        
        # –û–±–º–µ–∂—É—î–º–æ –º–∞—Å—à—Ç–∞–±
        new_scale = self._scale * zoom_factor
        if self.min_scale <= new_scale <= self.max_scale:
            # –ó—É–º –¥–æ –ø–æ–∑–∏—Ü—ñ—ó –∫—É—Ä—Å–æ—Ä–∞
            mouse_pos = event.position()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–Ω–æ—Å–Ω—É –ø–æ–∑–∏—Ü—ñ—é –∫—É—Ä—Å–æ—Ä–∞
            rel_x = (mouse_pos.x() - self._offset.x()) / (self.pixmap.width() * self._scale)
            rel_y = (mouse_pos.y() - self._offset.y()) / (self.pixmap.height() * self._scale)
            
            self._scale = new_scale
            
            # –ö–æ—Ä–∏–≥—É—î–º–æ –∑–º—ñ—â–µ–Ω–Ω—è
            self._offset.setX(mouse_pos.x() - (rel_x * self.pixmap.width() * self._scale))
            self._offset.setY(mouse_pos.y() - (rel_y * self.pixmap.height() * self._scale))
            
            self.update()
    
    def mousePressEvent(self, event):
        """–ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è"""
        if event.button() == Qt.MouseButton.LeftButton and self.pixmap and self._offset:
            self.dragging = True
            self.last_pan_point = event.position()
    
    def mouseMoveEvent(self, event):
        """–ü–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ"""
        if self.dragging and self.last_pan_point and self._offset:
            delta = event.position() - self.last_pan_point
            self._offset.setX(self._offset.x() + delta.x())
            self._offset.setY(self._offset.y() + delta.y())
            self.last_pan_point = event.position()
            self.update()
    
    def mouseReleaseEvent(self, event):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ—Ç—è–≥—É–≤–∞–Ω–Ω—è"""
        if event.button() == Qt.MouseButton.LeftButton:
            self.dragging = False
            self.last_pan_point = None
    
    def get_photo_params(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ–æ—Ç–æ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è"""
        return {
            'photo_path': self.photo_path,
            'photo_scale': self.photo_scale,
            'photo_offset_x': self.photo_offset_x,
            'photo_offset_y': self.photo_offset_y,
            'brightness': self.brightness,
            'contrast': self.contrast,
            'saturation': self.saturation,
            'sharpness': self.sharpness
        }
    
    def set_photo_params(self, params):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ–æ—Ç–æ"""
        self.photo_scale = params.get('photo_scale', 1.0)
        self.photo_offset_x = params.get('photo_offset_x', 0)
        self.photo_offset_y = params.get('photo_offset_y', 0)
        self.brightness = params.get('brightness', 0)
        self.contrast = params.get('contrast', 0)
        self.saturation = params.get('saturation', 0)
        self.sharpness = params.get('sharpness', 0)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó
        self._scale = self.photo_scale
        if self._offset is None:
            from PySide6.QtCore import QPointF
            self._offset = QPointF(self.photo_offset_x, self.photo_offset_y)
        else:
            self._offset.setX(self.photo_offset_x)
            self._offset.setY(self.photo_offset_y)
        
        if params.get('photo_path'):
            self.load_photo(params['photo_path'])
        else:
            self.update()
    
    def get_current_transform_params(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü—ñ—ó"""
        # –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∑–æ–≤–Ω—ñ—à–Ω—ñ–º–∏
        self.photo_scale = self._scale
        if self._offset:
            self.photo_offset_x = self._offset.x()
            self.photo_offset_y = self._offset.y()
        
        return {
            'photo_scale': self.photo_scale,
            'photo_offset_x': self.photo_offset_x,
            'photo_offset_y': self.photo_offset_y,
            'brightness': self.brightness,
            'contrast': self.contrast,
            'saturation': self.saturation,
            'sharpness': self.sharpness
        }
    
    def _auto_fit_photo(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –ø—ñ–¥–≥–∞–Ω—è—î —Ñ–æ—Ç–æ –ø—ñ–¥ –≤—ñ–¥–∂–µ—Ç"""
        if not self.pixmap:
            return
        
        widget_rect = self.rect()
        pixmap_rect = self.pixmap.rect()
        
        # –û–±—á–∏—Å–ª—é—î–º–æ –º–∞—Å—à—Ç–∞–± –¥–ª—è –≤–º—ñ—â–µ–Ω–Ω—è –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º –ø—Ä–æ–ø–æ—Ä—Ü—ñ–π
        scale_x = widget_rect.width() / pixmap_rect.width()
        scale_y = widget_rect.height() / pixmap_rect.height()
        fit_scale = min(scale_x, scale_y) * 0.9  # –ù–µ–≤–µ–ª–∏–∫–∏–π –≤—ñ–¥—Å—Ç—É–ø
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º–∞—Å—à—Ç–∞–± —Ç–∞ —Ü–µ–Ω—Ç—Ä—É—î–º–æ
        self._scale = fit_scale
        from PySide6.QtCore import QPointF
        center_x = (widget_rect.width() - pixmap_rect.width() * fit_scale) / 2
        center_y = (widget_rect.height() - pixmap_rect.height() * fit_scale) / 2
        self._offset = QPointF(center_x, center_y)
        
        self.update()
