# ui/dialogs/edit_client/main_dialog.py
"""–ì–æ–ª–æ–≤–Ω–∏–π –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
from PySide6.QtCore import Qt, Signal
from PySide6.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QLabel, 
                               QPushButton, QTabWidget, QWidget, QFrame, QFileDialog)
from PySide6.QtGui import QFont
from qfluentwidgets import MessageBox, InfoBar, InfoBarPosition
from .basic_tab import BasicTab
from .physical_tab_new import PhysicalTab
from .health_tab import HealthTab
from .lifestyle_tab import LifestyleTab
from .goals_tab import GoalsTab
from .measurements_tab import MeasurementsTab
from .testing_tab import TestingTab
from .ai_tab import AITab
from ui.dialogs.photo_display import PhotoDisplayWidget
from ui.styles import COLORS
import os


class EditClientDialog(QDialog):
    """–î—ñ–∞–ª–æ–≥ –¥–æ–¥–∞–≤–∞–Ω–Ω—è/—Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
    
    client_saved = Signal(dict)  # –°–∏–≥–Ω–∞–ª –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞
    
    def __init__(self, client_data=None, parent=None):
        super().__init__(parent)
        self.client_data = client_data or {}
        self.is_edit_mode = bool(client_data)
        self._current_photo_path = self.client_data.get('photo_path')
        
        # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≤—ñ–∫–Ω–∞
        self.setWindowTitle("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞" if self.is_edit_mode else "‚ûï –î–æ–¥–∞—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞")
        self.setWindowState(Qt.WindowState.WindowMaximized)
        self.setStyleSheet("""
            QDialog {
                background-color: #f8f9fa;
            }
        """)
        
        self._init_ui()
        
        # –ó–∞–ø–æ–≤–Ω—é—î–º–æ –¥–∞–Ω—ñ —è–∫—â–æ —Ä–µ–¥–∞–≥—É—î–º–æ
        if self.is_edit_mode:
            self._load_client_data()
        else:
            # –î–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ –æ—á–∏—â–∞—î–º–æ –≤—Å—ñ –ø–æ–ª—è
            self._set_empty_values_for_new_client()
    
    def _init_ui(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥—ñ–∞–ª–æ–≥—É"""
        main_layout = QHBoxLayout(self)
        main_layout.setContentsMargins(20, 20, 20, 20)
        main_layout.setSpacing(20)
        
        # ===== –õ–Ü–í–ê –ü–ê–ù–ï–õ–¨: –§–û–¢–û –ö–õ–Ü–Ñ–ù–¢–ê =====
        self._create_photo_panel()
        
        # ===== –ü–†–ê–í–ê –ü–ê–ù–ï–õ–¨: –í–ö–õ–ê–î–ö–ò –ó –î–ê–ù–ò–ú–ò =====
        self._create_data_panel()
        
        # –î–æ–¥–∞—î–º–æ –ø–∞–Ω–µ–ª—ñ –¥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ layout
        main_layout.addWidget(self.photo_panel)
        main_layout.addWidget(self.data_panel, 1)  # –†–æ–∑—Ç—è–≥—É—î—Ç—å—Å—è
    
    def _create_photo_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ª—ñ–≤—É –ø–∞–Ω–µ–ª—å –¥–ª—è —Ñ–æ—Ç–æ"""
        self.photo_panel = QFrame()
        self.photo_panel.setFixedWidth(320)
        self.photo_panel.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #E5E7EB;
                border-radius: 12px;
            }
        """)
        
        # –î–æ–¥–∞—î–º–æ —Ç—ñ–Ω—å
        from PySide6.QtWidgets import QGraphicsDropShadowEffect
        from PySide6.QtGui import QColor
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(15)
        shadow.setColor(QColor(0, 0, 0, 30))
        shadow.setOffset(0, 4)
        self.photo_panel.setGraphicsEffect(shadow)
        
        layout = QVBoxLayout(self.photo_panel)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üì∑ –§–æ—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞")
        title.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: 600;
                color: #111827;
                background: transparent;
                border: none;
            }
        """)
        layout.addWidget(title)
        
        # –û–±–ª–∞—Å—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
        self.photo_display = PhotoDisplayWidget()
        self.photo_display.setFixedSize(280, 350)
        layout.addWidget(self.photo_display)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–æ—Ç–æ
        self.select_photo_btn = QPushButton("üìÅ –û–±—Ä–∞—Ç–∏ —Ñ–æ—Ç–æ")
        self.select_photo_btn.setFixedHeight(45)
        self.select_photo_btn.setStyleSheet(f"""
            QPushButton {{
                background: {COLORS['primary']};
                color: white;
                font-size: 14px;
                font-weight: 600;
                border: none;
                border-radius: 8px;
                padding: 12px;
            }}
            QPushButton:hover {{
                background: #2563eb;
            }}
            QPushButton:pressed {{
                background: #1d4ed8;
            }}
        """)
        self.select_photo_btn.clicked.connect(self._select_photo)
        layout.addWidget(self.select_photo_btn)
        
        layout.addStretch()
    
    def _create_data_panel(self):
        """–°—Ç–≤–æ—Ä—é—î –ø—Ä–∞–≤—É –ø–∞–Ω–µ–ª—å –∑ –≤–∫–ª–∞–¥–∫–∞–º–∏"""
        self.data_panel = QFrame()
        self.data_panel.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #E5E7EB;
                border-radius: 12px;
            }
        """)
        
        layout = QVBoxLayout(self.data_panel)
        layout.setContentsMargins(25, 25, 25, 25)
        layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìã –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞")
        title.setStyleSheet("""
            QLabel {
                font-size: 22px;
                font-weight: 600;
                color: #111827;
                background: transparent;
                border: none;
            }
        """)
        layout.addWidget(title)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        self.tab_widget.setStyleSheet(f"""
            QTabWidget::pane {{
                border: 1px solid #E5E7EB;
                border-radius: 8px;
                background-color: white;
            }}
            QTabBar::tab {{
                background-color: #F3F4F6;
                color: #6B7280;
                padding: 12px 20px;
                margin-right: 2px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                font-weight: 500;
                min-width: 120px;
            }}
            QTabBar::tab:selected {{
                background-color: white;
                color: {COLORS['primary']};
                border-bottom: 2px solid {COLORS['primary']};
                font-weight: 600;
            }}
            QTabBar::tab:hover {{
                background-color: #E5E7EB;
            }}
        """)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—Å—ñ 8 –≤–∫–ª–∞–¥–æ–∫
        self.basic_tab = BasicTab(self.client_data, parent=self)
        self.physical_tab = PhysicalTab(self.client_data, parent=self)
        self.health_tab = HealthTab(self.client_data)
        self.lifestyle_tab = LifestyleTab(self.client_data)
        self.goals_tab = GoalsTab(self.client_data)
        self.measurements_tab = MeasurementsTab(self.client_data)
        self.testing_tab = TestingTab(self.client_data)
        self.ai_tab = AITab(self.client_data)
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
        self._setup_tab_connections()
        
        # –î–æ–¥–∞—î–º–æ –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget.addTab(self.basic_tab, "üë§ –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ")
        self.tab_widget.addTab(self.physical_tab, "üí™ –§—ñ–∑–∏—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏")
        self.tab_widget.addTab(self.health_tab, "‚ù§Ô∏è –ó–¥–æ—Ä–æ–≤'—è")
        self.tab_widget.addTab(self.lifestyle_tab, "üèÉ –°–ø–æ—Å—ñ–± –∂–∏—Ç—Ç—è")
        self.tab_widget.addTab(self.goals_tab, "üéØ –¶—ñ–ª—ñ —Ç–∞ –ø–ª–∞–Ω–∏")
        self.tab_widget.addTab(self.measurements_tab, "üìè –ü–æ—Ç–æ—á–Ω—ñ –∑–∞–º—ñ—Ä–∏")
        self.tab_widget.addTab(self.testing_tab, "üì∏ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        self.tab_widget.addTab(self.ai_tab, "ü§ñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ê–Ü")
        
        layout.addWidget(self.tab_widget, 1)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è
        self._create_control_buttons(layout)
    
    def _create_control_buttons(self, layout):
        """–°—Ç–≤–æ—Ä—é—î –∫–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≤–Ω–∏–∑—É –≤—ñ–∫–Ω–∞"""
        buttons_layout = QHBoxLayout()
        buttons_layout.setContentsMargins(0, 20, 0, 0)
        
        buttons_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è
        cancel_btn = QPushButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
        cancel_btn.setFixedSize(140, 45)
        cancel_btn.setStyleSheet("""
            QPushButton {
                background: #6B7280;
                color: white;
                font-size: 14px;
                font-weight: 600;
                border: none;
                border-radius: 8px;
                padding: 12px;
            }
            QPushButton:hover {
                background: #4B5563;
            }
            QPushButton:pressed {
                background: #374151;
            }
        """)
        cancel_btn.clicked.connect(self.reject)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        save_btn = QPushButton("‚úÖ –ó–±–µ—Ä–µ–≥—Ç–∏")
        save_btn.setFixedSize(140, 45)
        save_btn.setStyleSheet(f"""
            QPushButton {{
                background: {COLORS['success']};
                color: white;
                font-size: 14px;
                font-weight: 600;
                border: none;
                border-radius: 8px;
                padding: 12px;
            }}
            QPushButton:hover {{
                background: #059669;
            }}
            QPushButton:pressed {{
                background: #047857;
            }}
        """)
        save_btn.clicked.connect(self._save_client)
        
        buttons_layout.addWidget(cancel_btn)
        buttons_layout.addSpacing(10)
        buttons_layout.addWidget(save_btn)
        
        layout.addLayout(buttons_layout)
    
    def _setup_tab_connections(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏—Ö —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤"""
        print("üîó –ù–∞–ª–∞—à—Ç–æ–≤—É—é –∑–≤'—è–∑–∫–∏ –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏...")
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ –æ—Å–Ω–æ–≤–Ω–∏—Ö –¥–∞–Ω–∏—Ö (–≤—ñ–∫, —Å—Ç–∞—Ç—å) –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
        if hasattr(self.basic_tab, 'birth_date_edit'):
            self.basic_tab.birth_date_edit.dateChanged.connect(self._trigger_calculations_update)
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª dateChanged –¥–ª—è –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
        
        if hasattr(self.basic_tab, 'gender_combo'):
            self.basic_tab.gender_combo.currentTextChanged.connect(self._trigger_calculations_update)
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª currentTextChanged –¥–ª—è —Å—Ç–∞—Ç—ñ")
        
        # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ –∑–º—ñ–Ω–∏ –≤ —Å–ø–æ—Å–æ–±—ñ –∂–∏—Ç—Ç—è (–∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å) –¥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤
        if hasattr(self.lifestyle_tab, 'activity_level_combo'):
            self.lifestyle_tab.activity_level_combo.currentTextChanged.connect(self._trigger_calculations_update)
            print("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–æ —Å–∏–≥–Ω–∞–ª currentTextChanged –¥–ª—è —Ä—ñ–≤–Ω—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ")
        
        print("üîó –ó–≤'—è–∑–∫–∏ –º—ñ–∂ –≤–∫–ª–∞–¥–∫–∞–º–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ")
    
    def _trigger_calculations_update(self):
        """–ó–∞–ø—É—Å–∫–∞—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤ —É —Ñ—ñ–∑–∏—á–Ω—ñ–π –≤–∫–ª–∞–¥—Ü—ñ"""
        print("üî• –ó–∞–ø—É—Å–∫ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—ñ–≤...")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î physical_tab
        if not hasattr(self, 'physical_tab'):
            print("‚ö†Ô∏è physical_tab —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
            return
            
        if hasattr(self.physical_tab, '_update_calculations'):
            print("üìä –í–∏–∫–ª–∏–∫–∞—é _update_calculations –≤ physical_tab")
            self.physical_tab._update_calculations()
        else:
            print("‚ö†Ô∏è –ú–µ—Ç–æ–¥ _update_calculations –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ physical_tab")
    
    def _select_photo(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –≤–∏–±–æ—Ä—É —Ñ–æ—Ç–æ"""
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ –∫–ª—ñ—î–Ω—Ç–∞",
            "",
            "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (*.png *.jpg *.jpeg *.gif *.bmp)"
        )
        
        if file_path:
            self._current_photo_path = file_path
            self.photo_display.load_photo(file_path)
            
            InfoBar.success(
                title="–£—Å–ø—ñ—Ö",
                content="–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ",
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP,
                duration=2000,
                parent=self
            )
    
    def _load_client_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
        if self.is_edit_mode and self.client_data:
            # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ —Ñ–æ—Ç–æ
            photo_params = {
                'photo_path': self.client_data.get('photo_path'),
                'photo_scale': self.client_data.get('photo_scale', 1.0),
                'photo_offset_x': self.client_data.get('photo_offset_x', 0),
                'photo_offset_y': self.client_data.get('photo_offset_y', 0),
                'brightness': self.client_data.get('brightness', 0),
                'contrast': self.client_data.get('contrast', 0),
                'saturation': self.client_data.get('saturation', 0),
                'sharpness': self.client_data.get('sharpness', 0)
            }
            self.photo_display.set_photo_params(photo_params)
        elif self._current_photo_path:
            self.photo_display.load_photo(self._current_photo_path)
    
    def _save_client(self):
        """–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        try:
            # –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ –∑ —É—Å—ñ—Ö –≤–∫–ª–∞–¥–æ–∫
            client_data = {}
            
            # –û—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ (–æ–±–æ–≤'—è–∑–∫–æ–≤—ñ)
            basic_data = self.basic_tab.get_data()
            if not self._validate_required_fields(basic_data):
                return
            
            client_data.update(basic_data)
            client_data.update(self.physical_tab.get_data())
            client_data.update(self.health_tab.get_data())
            client_data.update(self.lifestyle_tab.get_data())
            client_data.update(self.goals_tab.get_data())
            client_data.update(self.measurements_tab.get_data())
            client_data.update(self.testing_tab.get_data())
            client_data.update(self.ai_tab.get_data())
            
            # –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ —Ç–∞ –π–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏
            client_data['photo_path'] = self._current_photo_path
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ–∑–∏—Ü—ñ–æ–Ω—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
            photo_params = self.photo_display.get_current_transform_params()
            client_data.update(photo_params)
            
            # –î–æ–¥–∞—î–º–æ –º–µ—Ç–∞-–¥–∞–Ω—ñ
            from datetime import datetime
            if not self.is_edit_mode:
                import uuid
                client_data['id'] = str(uuid.uuid4())
                client_data['created_at'] = datetime.now().isoformat()
                client_data['last_visit'] = datetime.now().strftime("%d.%m.%Y")
            else:
                client_data['id'] = self.client_data.get('id')
                client_data['created_at'] = self.client_data.get('created_at')
                client_data['last_visit'] = datetime.now().strftime("%d.%m.%Y")
            
            client_data['updated_at'] = datetime.now().isoformat()
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–ª—ñ—î–Ω—Ç–∞ —É —Ñ–∞–π–ª JSON (—Ç–∏–º—á–∞—Å–æ–≤–æ, –ø–æ–∫–∏ –Ω–µ–º–∞—î –ë–î)
            self._save_client_to_file(client_data)
            
            self.client_saved.emit(client_data)
            
            InfoBar.success(
                title="–£—Å–ø—ñ—Ö",
                content="–ö–ª—ñ—î–Ω—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ",
                orient=Qt.Horizontal,
                isClosable=True,
                position=InfoBarPosition.TOP,
                duration=2000,
                parent=self
            )
            
            self.accept()
            
        except Exception as e:
            MessageBox(
                title="‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è",
                content=f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞:\n\n{str(e)}\n\n–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö.",
                parent=self
            ).exec()
    
    def _validate_required_fields(self, basic_data):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è"""
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ (–æ—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è)
        first_name = basic_data.get('first_name', '').strip()
        surname = basic_data.get('surname', '').strip()
        
        if not first_name:
            MessageBox(
                title="‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ",
                content="–ü–æ–ª–µ '–Ü–º'—è' —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è.\n\n–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –∫–ª—ñ—î–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º.",
                parent=self
            ).exec()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            self.tab_widget.setCurrentIndex(0)
            self.basic_tab.first_name_edit.setFocus()
            return False
        
        if not surname:
            MessageBox(
                title="‚ö†Ô∏è –ù–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–∞–Ω—ñ",
                content="–ü–æ–ª–µ '–ü—Ä—ñ–∑–≤–∏—â–µ' —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è.\n\n–í–≤–µ–¥—ñ—Ç—å –ø—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º.",
                parent=self
            ).exec()
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞—î–º–æ—Å—è –Ω–∞ –≤–∫–ª–∞–¥–∫—É –∑ –æ—Å–Ω–æ–≤–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
            self.tab_widget.setCurrentIndex(0)
            self.basic_tab.surname_edit.setFocus()
            return False
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É –¥–æ–≤–∂–∏–Ω—É —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞
        if len(first_name) < 2:
            MessageBox(
                title="‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ",
                content="–Ü–º'—è –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏.\n\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ —ñ–º'—è.",
                parent=self
            ).exec()
            
            self.tab_widget.setCurrentIndex(0)
            self.basic_tab.first_name_edit.setFocus()
            return False
        
        if len(surname) < 2:
            MessageBox(
                title="‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –¥–∞–Ω—ñ",
                content="–ü—Ä—ñ–∑–≤–∏—â–µ –∫–ª—ñ—î–Ω—Ç–∞ –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ –ø—Ä–∏–Ω–∞–π–º–Ω—ñ 2 —Å–∏–º–≤–æ–ª–∏.\n\n–í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–µ –ø—Ä—ñ–∑–≤–∏—â–µ.",
                parent=self
            ).exec()
            
            self.tab_widget.setCurrentIndex(0)
            self.basic_tab.surname_edit.setFocus()
            return False
        
        return True
    
    def _save_client_to_file(self, client_data):
        """–ó–±–µ—Ä—ñ–≥–∞—î –∫–ª—ñ—î–Ω—Ç–∞ —É —Ñ–∞–π–ª JSON"""
        import json
        import os
        from datetime import datetime
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –∫–ª—ñ—î–Ω—Ç—ñ–≤ —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
        clients_dir = "data/clients"
        os.makedirs(clients_dir, exist_ok=True)
        
        # –î–æ–¥–∞—î–º–æ timestamp
        client_data['created_at'] = datetime.now().isoformat()
        client_data['updated_at'] = datetime.now().isoformat()
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –±–µ–∑–ø–µ—á–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É –∑ —ñ–º–µ–Ω—ñ —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–∞
        first_name = client_data.get('first_name', '')
        surname = client_data.get('surname', '')
        full_name = f"{first_name} {surname}".strip()
        
        safe_name = "".join(c for c in full_name if c.isalnum() or c in ' -_').strip()
        safe_name = safe_name.replace(' ', '_')[:30]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ–≤–∂–∏–Ω—É
        
        filename = f"{safe_name}_{client_data['id'][:8]}.json"
        filepath = os.path.join(clients_dir, filename)
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —É —Ñ–∞–π–ª
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(client_data, f, ensure_ascii=False, indent=2)
        
        # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è
        from config.logger import get_app_logger
        logger = get_app_logger()
        
        logger.info(f"üíæ –ö–ª—ñ—î–Ω—Ç–∞ '{full_name}' –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filename}")
        print(f"‚úÖ –ö–ª—ñ—î–Ω—Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {filepath}")
        
        return client_data
    
    def _set_empty_values_for_new_client(self):
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –ø—É—Å—Ç—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –≤—Å—ñ—Ö –ø–æ–ª—ñ–≤ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞"""
        print("üÜï –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—É—Å—Ç–∏—Ö –∑–Ω–∞—á–µ–Ω—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞...")
        
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ª—è –≤ basic_tab
        if hasattr(self, 'basic_tab') and hasattr(self.basic_tab, 'set_default_empty_values'):
            self.basic_tab.set_default_empty_values()
        
        # –û—á–∏—â–∞—î–º–æ –ø–æ–ª—è –≤ physical_tab - —Ç–∞–º –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ –Ω—É–ª—å–æ–≤—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
        print("‚úÖ –í—Å—ñ –ø–æ–ª—è –æ—á–∏—â–µ–Ω—ñ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞")
