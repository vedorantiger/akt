# ui/dialogs/edit_client/testing_tab.py
"""–í–∫–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
import os
import shutil
from datetime import datetime
from PySide6.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QGroupBox, 
                               QPushButton, QScrollArea, QGridLayout, QLabel, QFileDialog)
from PySide6.QtCore import Qt
from qfluentwidgets import MessageBox
from ui.styles import COLORS
from ui.widgets.testing_card import TestingPhotoCard, TestingTextCard
from ui.dialogs.testing_photo_info_dialog import TestingPhotoInfoDialog, TestingTextInfoDialog
from ui.dialogs.photo_compare import PhotoCompareDialog


class TestingTab(QWidget):
    """–í–∫–ª–∞–¥–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
    
    def __init__(self, client_data=None, parent=None):
        super().__init__(parent)
        self.client_data = client_data or {}
        
        # –Ø–∫—â–æ –Ω–µ–º–∞—î ID (–Ω–æ–≤–∏–π –∫–ª—ñ—î–Ω—Ç), —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π
        if self.client_data.get('id'):
            self.client_id = self.client_data.get('id')
        else:
            import uuid
            self.client_id = f"temp_{str(uuid.uuid4())[:8]}"
            
        self.testing_photos = []  # –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–Ω–∏–∫—ñ–≤ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —Ñ–æ—Ç–æ
        self.text_blocks = []  # –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤
        self.selected_photos = []  # –°–ø–∏—Å–æ–∫ –≤–∏–±—Ä–∞–Ω–∏—Ö —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        self._init_ui()
        self._load_data()
    
    def _init_ui(self):
        """–°—Ç–≤–æ—Ä—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∫–ª–∞–¥–∫–∏"""
        scroll = QScrollArea(self)
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("QScrollArea { border: none; background: transparent; }")
        
        main_widget = QWidget()
        scroll.setWidget(main_widget)
        
        main_layout = QVBoxLayout(self)
        main_layout.addWidget(scroll)
        
        content_layout = QVBoxLayout(main_widget)
        content_layout.setContentsMargins(20, 20, 20, 20)
        content_layout.setSpacing(20)
        
        # ===== –§–û–¢–û–ì–†–ê–§–Ü–á –¢–ï–°–¢–£–í–ê–ù–ù–Ø =====
        photos_group = QGroupBox("üì∏ –§–æ—Ç–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        photos_group.setStyleSheet(self._get_group_style())
        content_layout.addWidget(photos_group)
        
        photos_layout = QVBoxLayout(photos_group)
        photos_layout.setContentsMargins(20, 25, 20, 20)
        photos_layout.setSpacing(15)
        
        # –ö–Ω–æ–ø–∫–∏ –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
        buttons_layout = QHBoxLayout()
        
        self.add_photos_btn = QPushButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ñ–æ—Ç–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        self.add_photos_btn.setFixedSize(200, 40)
        self.add_photos_btn.setStyleSheet(f"""
            QPushButton {{
                background: {COLORS['primary']};
                color: white;
                font-size: 14px;
                font-weight: 600;
                border: none;
                border-radius: 6px;
            }}
            QPushButton:hover {{
                background: #2563eb;
            }}
        """)
        self.add_photos_btn.clicked.connect(self._add_photos)
        
        self.compare_photos_btn = QPushButton("ÔøΩ –ü–æ—Ä—ñ–≤–Ω—è—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ")
        self.compare_photos_btn.setFixedSize(180, 40)
        self.compare_photos_btn.setEnabled(False)
        self.compare_photos_btn.setStyleSheet(f"""
            QPushButton {{
                background: {COLORS['secondary']};
                color: white;
                font-size: 14px;
                font-weight: 600;
                border: none;
                border-radius: 6px;
            }}
            QPushButton:hover {{
                background: #7C3AED;
            }}
            QPushButton:disabled {{
                background: #9CA3AF;
                color: #6B7280;
            }}
        """)
        self.compare_photos_btn.clicked.connect(self._compare_photos)
        
        buttons_layout.addWidget(self.add_photos_btn)
        buttons_layout.addWidget(self.compare_photos_btn)
        buttons_layout.addStretch()
        
        photos_layout.addLayout(buttons_layout)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–æ—Ç–æ
        stats_layout = QHBoxLayout()
        
        self.photos_count_label = QLabel("üì∑ –§–æ—Ç–æ: 0")
        self.photos_count_label.setStyleSheet("""
            QLabel {
                font-size: 13px;
                color: #6B7280;
                font-weight: 500;
            }
        """)
        
        self.selected_count_label = QLabel("‚úÖ –í–∏–±—Ä–∞–Ω–æ: 0")
        self.selected_count_label.setStyleSheet("""
            QLabel {
                font-size: 13px;
                color: #059669;
                font-weight: 500;
            }
        """)
        
        stats_layout.addWidget(self.photos_count_label)
        stats_layout.addWidget(self.selected_count_label)
        stats_layout.addStretch()
        
        photos_layout.addLayout(stats_layout)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –∫–∞—Ä—Ç–æ–∫ —Ñ–æ—Ç–æ
        self.photos_scroll = QScrollArea()
        self.photos_scroll.setWidgetResizable(True)
        self.photos_scroll.setMinimumHeight(300)
        self.photos_scroll.setStyleSheet("""
            QScrollArea {
                border: 1px solid #E5E7EB;
                border-radius: 8px;
                background: #F9FAFB;
            }
        """)
        photos_layout.addWidget(self.photos_scroll)
        
        self.photos_grid_widget = QWidget()
        self.photos_scroll.setWidget(self.photos_grid_widget)
        
        self.photos_grid = QGridLayout(self.photos_grid_widget)
        self.photos_grid.setSpacing(15)
        self.photos_grid.setContentsMargins(15, 15, 15, 15)
        
        # ===== –¢–ï–ö–°–¢–û–í–Ü –ë–õ–û–ö–ò –¢–ï–°–¢–£–í–ê–ù–ù–Ø =====
        text_group = QGroupBox("ÔøΩ –¢–µ–∫—Å—Ç–æ–≤—ñ –±–ª–æ–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è")
        text_group.setStyleSheet(self._get_group_style())
        content_layout.addWidget(text_group)
        
        text_layout = QVBoxLayout(text_group)
        text_layout.setContentsMargins(20, 25, 20, 20)
        text_layout.setSpacing(15)
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤
        text_buttons_layout = QHBoxLayout()
        
        self.add_text_btn = QPushButton("‚ûï –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫")
        self.add_text_btn.setFixedSize(200, 40)
        self.add_text_btn.setStyleSheet("""
            QPushButton {
                background: #8B5CF6;
                color: white;
                font-size: 14px;
                font-weight: 600;
                border: none;
                border-radius: 6px;
            }
            QPushButton:hover {
                background: #7C3AED;
            }
        """)
        self.add_text_btn.clicked.connect(self._add_text_block)
        
        text_buttons_layout.addWidget(self.add_text_btn)
        text_buttons_layout.addStretch()
        
        text_layout.addLayout(text_buttons_layout)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –∫–∞—Ä—Ç–æ–∫
        self.text_scroll = QScrollArea()
        self.text_scroll.setWidgetResizable(True)
        self.text_scroll.setMinimumHeight(200)
        self.text_scroll.setStyleSheet("""
            QScrollArea {
                border: 1px solid #E5E7EB;
                border-radius: 8px;
                background: #F9FAFB;
            }
        """)
        text_layout.addWidget(self.text_scroll)
        
        self.text_blocks_widget = QWidget()
        self.text_scroll.setWidget(self.text_blocks_widget)
        
        self.text_blocks_layout = QVBoxLayout(self.text_blocks_widget)
        self.text_blocks_layout.setSpacing(10)
        self.text_blocks_layout.setContentsMargins(15, 15, 15, 15)
        
        content_layout.addStretch()
    
    def _get_group_style(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —Å—Ç–∏–ª—å –¥–ª—è –≥—Ä—É–ø–∏"""
        return """
            QGroupBox {
                font-size: 16px;
                font-weight: 600;
                color: #111827;
                border: 2px solid #E5E7EB;
                border-radius: 8px;
                padding-top: 10px;
                margin-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                background-color: white;
            }
        """
    
    def _get_client_testing_folder(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç–∞"""
        if not self.client_id:
            return None
        
        client_folder = os.path.join("data", "clients", self.client_id)
        testing_folder = os.path.join(client_folder, "photos", "testing")
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É —è–∫—â–æ –Ω–µ —ñ—Å–Ω—É—î
        os.makedirs(testing_folder, exist_ok=True)
        return testing_folder
    
    def _add_photos(self):
        """–î–æ–¥–∞—î —Ñ–æ—Ç–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è"""
        file_paths, _ = QFileDialog.getOpenFileNames(
            self,
            "–û–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ç–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
            "",
            "–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è (*.png *.jpg *.jpeg *.gif *.bmp)"
        )
        
        if not file_paths:
            return
        
        testing_folder = self._get_client_testing_folder()
        if not testing_folder:
            MessageBox.warning(
                title="–ü–æ–º–∏–ª–∫–∞",
                content="–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É –¥–ª—è —Ñ–æ—Ç–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è",
                parent=self
            )
            return
        
        for file_path in file_paths:
            # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
            info_dialog = TestingPhotoInfoDialog(self)
            if info_dialog.exec() == info_dialog.Accepted:
                date_taken, description = info_dialog.get_info()
                
                # –ö–æ–ø—ñ—é—î–º–æ —Ñ–∞–π–ª –¥–æ –ø–∞–ø–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞
                filename = os.path.basename(file_path)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                new_filename = f"testing_{timestamp}_{filename}"
                new_path = os.path.join(testing_folder, new_filename)
                
                try:
                    shutil.copy2(file_path, new_path)
                    
                    # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–æ—Ç–æ
                    photo_info = {
                        'path': new_path,
                        'date_taken': date_taken,
                        'description': description,
                        'timestamp': timestamp
                    }
                    self.testing_photos.append(photo_info)
                    
                except Exception as e:
                    MessageBox.warning(
                        title="–ü–æ–º–∏–ª–∫–∞",
                        content=f"–ù–µ –≤–¥–∞–ª–æ—Å—è —Å–∫–æ–ø—ñ—é–≤–∞—Ç–∏ —Ñ–∞–π–ª: {str(e)}",
                        parent=self
                    )
        
        self._update_photos_display()
    
    def _add_text_block(self):
        """–î–æ–¥–∞—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫"""
        info_dialog = TestingTextInfoDialog(parent=self)
        if info_dialog.exec() == info_dialog.Accepted:
            date_created, text_content = info_dialog.get_content()
            
            text_block = {
                'date_created': date_created,
                'text_content': text_content,
                'timestamp': datetime.now().strftime("%Y%m%d_%H%M%S")
            }
            self.text_blocks.append(text_block)
            self._update_text_blocks_display()
    
    def _update_photos_display(self):
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ"""
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π layout
        for i in reversed(range(self.photos_grid.count())):
            item = self.photos_grid.itemAt(i)
            if item:
                widget = item.widget()
                if widget:
                    widget.setParent(None)
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ —Ñ–æ—Ç–æ
        for i, photo_info in enumerate(self.testing_photos):
            photo_card = TestingPhotoCard(
                photo_info['path'],
                photo_info['date_taken'],
                photo_info['description']
            )
            
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
            photo_card.selection_changed.connect(self._on_photo_selection_changed)
            photo_card.delete_requested.connect(self._delete_photo)
            photo_card.edit_requested.connect(self._edit_photo_info)
            
            # –†–æ–∑–º—ñ—â—É—î–º–æ –≤ —Å—ñ—Ç—Ü—ñ (3 –∫–æ–ª–æ–Ω–∫–∏)
            row = i // 3
            col = i % 3
            self.photos_grid.addWidget(photo_card, row, col)
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self._update_stats()
    
    def _update_text_blocks_display(self):
        """–û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤"""
        # –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π layout
        for i in reversed(range(self.text_blocks_layout.count())):
            item = self.text_blocks_layout.itemAt(i)
            if item:
                widget = item.widget()
                if widget:
                    widget.setParent(None)
        
        # –î–æ–¥–∞—î–º–æ –∫–∞—Ä—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤
        for i, text_block in enumerate(self.text_blocks):
            text_card = TestingTextCard(
                i,
                text_block['date_created'],
                text_block['text_content']
            )
            
            # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ —Å–∏–≥–Ω–∞–ª–∏
            text_card.delete_requested.connect(self._delete_text_block)
            text_card.edit_requested.connect(self._edit_text_block)
            
            self.text_blocks_layout.addWidget(text_card)
        
        # –î–æ–¥–∞—î–º–æ —Ä–æ–∑—Ç—è–≥—É–≤–∞—á –≤ –∫—ñ–Ω—Ü—ñ
        self.text_blocks_layout.addStretch()
    
    def _on_photo_selection_changed(self, selected, photo_path):
        """–û–±—Ä–æ–±–ª—è—î –∑–º—ñ–Ω—É –≤–∏–±–æ—Ä—É —Ñ–æ—Ç–æ"""
        if selected:
            if photo_path not in self.selected_photos:
                self.selected_photos.append(photo_path)
        else:
            if photo_path in self.selected_photos:
                self.selected_photos.remove(photo_path)
        
        self._update_stats()
    
    def _update_stats(self):
        """–û–Ω–æ–≤–ª—é—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        total_photos = len(self.testing_photos)
        selected_count = len(self.selected_photos)
        
        self.photos_count_label.setText(f"üì∑ –§–æ—Ç–æ: {total_photos}")
        self.selected_count_label.setText(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ: {selected_count}")
        
        # –í–∫–ª—é—á–∞—î–º–æ/–≤–∏–º–∏–∫–∞—î–º–æ –∫–Ω–æ–ø–∫—É –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        self.compare_photos_btn.setEnabled(2 <= selected_count <= 6)
    
    def _compare_photos(self):
        """–í—ñ–¥–∫—Ä–∏–≤–∞—î –¥—ñ–∞–ª–æ–≥ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —Ñ–æ—Ç–æ"""
        if len(self.selected_photos) < 2:
            MessageBox.warning(
                title="–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —Ñ–æ—Ç–æ",
                content="–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –º—ñ–Ω—ñ–º—É–º 2 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—ó",
                parent=self
            )
            return
        
        if len(self.selected_photos) > 6:
            MessageBox.warning(
                title="–ó–∞–±–∞–≥–∞—Ç–æ —Ñ–æ—Ç–æ",
                content="–î–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –º–æ–∂–Ω–∞ –≤–∏–±—Ä–∞—Ç–∏ –º–∞–∫—Å–∏–º—É–º 6 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ–π",
                parent=self
            )
            return
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
        compare_dialog = PhotoCompareDialog(self.selected_photos, self)
        compare_dialog.exec()
    
    def _delete_photo(self, photo_path):
        """–í–∏–¥–∞–ª—è—î —Ñ–æ—Ç–æ"""
        result = MessageBox.question(
            title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
            content="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ —Ñ–æ—Ç–æ?",
            parent=self
        )
        
        if result == 1:  # Yes
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ —Å–ø–∏—Å–∫—É
            self.testing_photos = [p for p in self.testing_photos if p['path'] != photo_path]
            
            # –í–∏–¥–∞–ª—è—î–º–æ –∑ –≤–∏–±—Ä–∞–Ω–∏—Ö
            if photo_path in self.selected_photos:
                self.selected_photos.remove(photo_path)
            
            # –í–∏–¥–∞–ª—è—î–º–æ —Ñ–∞–π–ª
            try:
                if os.path.exists(photo_path):
                    os.remove(photo_path)
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É: {e}")
            
            self._update_photos_display()
    
    def _edit_photo_info(self, photo_path):
        """–†–µ–¥–∞–≥—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–æ—Ç–æ"""
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–æ—Ç–æ –≤ —Å–ø–∏—Å–∫—É
        photo_info = None
        for p in self.testing_photos:
            if p['path'] == photo_path:
                photo_info = p
                break
        
        if not photo_info:
            return
        
        # –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –¥—ñ–∞–ª–æ–≥ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        info_dialog = TestingPhotoInfoDialog(self)
        
        # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω—ñ –¥–∞–Ω—ñ
        try:
            from PySide6.QtCore import QDate
            date_parts = photo_info['date_taken'].split('.')
            if len(date_parts) == 3:
                day, month, year = map(int, date_parts)
                info_dialog.date_edit.setDate(QDate(year, month, day))
        except:
            pass
        
        info_dialog.description_edit.setText(photo_info['description'])
        
        if info_dialog.exec() == info_dialog.Accepted:
            date_taken, description = info_dialog.get_info()
            photo_info['date_taken'] = date_taken
            photo_info['description'] = description
            self._update_photos_display()
    
    def _delete_text_block(self, index):
        """–í–∏–¥–∞–ª—è—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫"""
        if 0 <= index < len(self.text_blocks):
            result = MessageBox.question(
                title="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è",
                content="–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫?",
                parent=self
            )
            
            if result == 1:  # Yes
                del self.text_blocks[index]
                self._update_text_blocks_display()
    
    def _edit_text_block(self, index):
        """–†–µ–¥–∞–≥—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –±–ª–æ–∫"""
        if 0 <= index < len(self.text_blocks):
            text_block = self.text_blocks[index]
            
            info_dialog = TestingTextInfoDialog(
                text_block['date_created'],
                text_block['text_content'],
                self
            )
            
            if info_dialog.exec() == info_dialog.Accepted:
                date_created, text_content = info_dialog.get_content()
                text_block['date_created'] = date_created
                text_block['text_content'] = text_content
                self._update_text_blocks_display()
    
    def _load_data(self):
        """–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –¥–∞–Ω—ñ –∫–ª—ñ—î–Ω—Ç–∞"""
        if not self.client_data:
            return
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
        self.testing_photos = self.client_data.get('testing_photos', [])
        self._update_photos_display()
        
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–µ–∫—Å—Ç–æ–≤—ñ –±–ª–æ–∫–∏
        self.text_blocks = self.client_data.get('testing_text_blocks', [])
        self._update_text_blocks_display()
    
    def get_data(self):
        """–ü–æ–≤–µ—Ä—Ç–∞—î –¥–∞–Ω—ñ –≤–∫–ª–∞–¥–∫–∏"""
        return {
            'testing_photos': self.testing_photos,
            'testing_text_blocks': self.text_blocks
        }
